// Specification JCup
import java_cup.runtime.*;
import java.util.*;
import java.time.YearMonth;
import java.util.Map.Entry;
import java.io.*;
import java.util.regex.*;
 
parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}


public String tokenToString (Symbol token) {
// qqs exemples pour voir...
     switch (token.sym) {
	case sym.SI : return "SI"; 
    case sym.ALORS : return "ALORS";
    case sym.SINON : return "SINON";
    case sym.FSI : return "FSI";
	case sym.CHAINE : return "CHAINE "+token.value;  
	case sym.ENTIER : return "ENTIER "+token.value;  
	case sym.POURTOUT : return "POURTOUT";
    case sym.FAIRE : return "FAIRE";
    case sym.FAIT : return "FAIT";
	case sym.POINT : return ".";
    case sym.POINTV : return ";";
    case sym.V : return ",";
    case sym.DPOINT : return ":";
    case sym.DEGAL : return "==";
    case sym.EGAL : return "=";
    case sym.PG : return "(";
    case sym.PD : return ")";
    case sym.AG : return "{";
    case sym.AD : return "}";
    case sym.definir : return "definir";
    case sym.programmer : return "programmer";
    case sym.associer : return "associer";
    case sym.message : return "message";
    case sym.executer_scenario : return "executer_scenario";
    case sym.ProgD : return  "<PROGRAMME_DOMUS>";
    case sym.ProgDF : return "</ROGRAMME_DOMUS>";
    case sym.Dec_App : return "<DECLARATION_APPAREILS>" ;
    case sym.Dec_AppF : return "</DECLARATION_APPAREILS>" ;
    case sym.Dec_Int : return "<DECLARATION_INTERFACES>" ;
    case sym.Dec_IntF : return "</DECLARATION_INTERFACES>" ; 
    case sym.Dec_Sce : return "<DECLARATION_SCENARII>";
    case sym.Dec_SceF : return "<DECLARATION_SCENARII>";
    case sym.Scenario : return ""+token.value ;
    case sym.ScenarioF : return ""+token.value ;
    case sym.Dec_Com : return "<DECLARATION_COMMANDES>" ;
    case sym.Dec_ComF : return "</DECLARATION_COMMANDES>" ;
    case sym.ECLAIRAGE : return "ECLAIRAGE" ;
    case sym.VOLET : return "VOLET" ;
    case sym.FENETRE : return "FENETRE" ;
    case sym.CHAUFFAGE : return "CHAUFFAGE" ;
    case sym.ALARME : return "ALARME" ;
    case sym.AUTRE : return "AUTRE"+token.value;
    case sym.APPR_DIST : return "APPR_DIST" ;
    case sym.DATE : return " DATE "+token.value ;
    case sym.OPERATION : return "OPERATION" ;
    case sym.OPERATION_ET : return "OPERATION_ETAT" ;
	case sym.ETAT : return "ETAT " ;
    case sym.IDF : return "IDF "+token.value ;
    case sym.CD : return "CD "+token.value ;
	case sym.AUTRE_VIDE : return "AUTRE_VIDE";


   
      

	default : return "Token imprévu ou error";
	}
}

:}



action code {:

Vector<String> v=new Vector<String>();   
int type=0;
int typei=0;
int i=1;
int k=1;
String[] t;
String autre;
String ensemble=null;
String scenario_contenu="";
String T;
boolean boucle;
boolean cond;
boolean other=false;
String iterateur=null;
HashMap <String,Entree> App_simple = new LinkedHashMap<String, Entree>();
HashMap <String,Entree> Inter_simple = new LinkedHashMap<String, Entree>();
//HashMap <String,Entree> Date_simple = new LinkedHashMap<String, Entree>();
HashMap <String,Vector<String>> commande_struct = new LinkedHashMap<String, Vector<String>>();
HashMap <String,Vector<String>> App_struct = new LinkedHashMap<String,Vector<String>>();
HashMap <String,Vector<String>> Date_struct = new LinkedHashMap<String, Vector<String>>();
HashMap <String,String> Scenarios = new LinkedHashMap<String, String>();
String msg=null;
boolean inst_impossible=false;
      
void exemple_de_fonction(String i1, String i2)
{
	String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
	if (!(i1.equals(i2))) parser.report_error(m,null);	 
}

void identifiant_existant(String id)
{
String m= "l'identifiant "+id+" est déja déclaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void identInst_existant(String id)
{
String m= "l'identifiant "+id+" est déja déclaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void Date_erreur(String id)
{
String m= "la Date "+id+" n'est pas Valide! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void identComm_existant(String id)
{
String m= "l'identifiant "+id+" est déja déclaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void scenario_existant(String id)
{
String m= "Scenario "+id+" ne peut etre déclaré car l'identifiant "+id+" a déja été délcaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}

void scenario_fermé(String id,String id2)
{
String m= "le scenario "+id+" a été fermé avec l'identifiant "+id2+" erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}

void boucle_impossible(String id)
{
String m= "La boucle ne pourra etre exécuté car l'identifiant "+id+"  a déja été délcaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}

boolean verif_Date(String l)
{
                 String k=null;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
        
            if(t[0].equals("_") || Integer.parseInt(t[0]) < 2999 && Integer.parseInt(t[0]) >= 2000)
                  {
                     if(t[1].equals("_") || Integer.parseInt(t[1]) < 13 && Integer.parseInt(t[1]) > 0)
                         {
                         if(t[1].equals("_") || Integer.parseInt(t[1]) == 1 || Integer.parseInt(t[1]) == 3 || Integer.parseInt(t[1]) ==5 || Integer.parseInt(t[1]) == 7 ||Integer.parseInt(t[1]) == 8 
|| Integer.parseInt(t[1]) == 10 || Integer.parseInt(t[1]) ==12)
                                   {
                                      if(t[2].equals("_")  || Integer.parseInt(t[2]) < 32 && Integer.parseInt(t[2])> 0 )
                                          {
                                      if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                      if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                           }else{return false;}
                                   }else if(t[1].equals("_") || Integer.parseInt(t[1]) == 4 || Integer.parseInt(t[1]) == 6 || Integer.parseInt(t[1]) ==9 || Integer.parseInt(t[1]) == 11)
                                    {
                            if(t[2].equals("_") || Integer.parseInt(t[2]) < 31 && Integer.parseInt(t[2])> 0 )
                                          {
                                 if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                      if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                          }else{return false;}
                                    }else if (Integer.parseInt(t[1]) ==2)
                                           {
                                              if(Integer.parseInt(t[0]) % 4 ==0 && Integer.parseInt(t[0])% 100 != 0 
                                               || Integer.parseInt(t[0]) % 400 == 0){
                      if(t[2].equals("_") || Integer.parseInt(t[2]) < 30 && Integer.parseInt(t[2])> 0)
                                          {
                                    if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                       if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                           }else{return false;}
					
						}else{
                                         if(t[2].equals("_") || Integer.parseInt(t[2]) < 29 && Integer.parseInt(t[2])> 0)
                                          {
                                       if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                      if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                           }
                                   else{return false;}
				}
                              
                              }else{return false;}
                         }else{return false;}
                  }else{return false;}
}
boolean VerifidfScenar_code(String K) throws IOException
 {
     int p=0;
           String vec=Scenarios.get(k);
           
                          if(vec==null || !vec.equals(k)){return false;}
                               else {return true;}
       
 }
void identSCEN_inex(String K) throws IOException
 {
    
    String m= "l'identifiant "+K+" n'existe pas! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);
   
 }
void generate_code (String str,String path) throws IOException
 {
  FileWriter writer=new FileWriter("./test/code_domus/"+path);
  PrintWriter printer=new PrintWriter(writer);
  printer.print(str);
  printer.close();
 }
:}

terminal SI, ALORS, FSI,POURTOUT,SINON,FAIRE,FAIT,POINT,POINTV,VOLET,ECLAIRAGE,TELECOMMANDE,MOBILE,INTERRUPTEUR,V,DPOINT,DEGAL,EGAL,PG,PD,AG,AD,CD,Scenario,ScenarioF;
terminal definir,programmer,associer,message,executer_scenario,ProgD,ProgDF,Dec_App,Dec_AppF,Dec_Com,Dec_ComF,Dec_Int,Dec_IntF;
terminal Dec_Sce,Dec_SceF,FENETRE,ALARME,AUTRE_VIDE,CHAUFFAGE;
terminal String IDF,DATE,CHAINE,AUTRE,OPERATION,ETAT,OPERATION_ET,APPR_DIST;
terminal Integer ENTIER;



non terminal DEBUT,APPAREILS,INTERFACES,COMMANDES,SCENARIOS,IDFS,ZONE_APPAREILS,ZONE_COMMANDE,ZONE_COMMUNE,ZONE_INTERFACES,ZONE_SCENARII;
non terminal INST,SIMPLE,BOUCLE,CONDITION,MESSAGE,S,LIST_DATE,STRUCT,COND,PARAMETRES,OP,OP2,OP3,OP5,IDFSS,IDFSSS,IDFK;
non terminal String OP4;
non terminal String TYPEA;
non terminal String TYPEI;





DEBUT ::= ProgD ZONE_APPAREILS ZONE_COMMUNE ZONE_COMMANDE ProgDF {:
 System.out.println("FINPROG "+parser.pline()+","+parser.pcolumn()); 
  String str="public class CMaisonUser extends CMaison { public CMaisonUser() { \n super();\n";
  for(Entry <String,Entree>  entry: App_simple.entrySet())
   {
       
       switch (entry.getValue().getType())
       {
       case 0:
       str+=" CVoletFenetre "+entry.getKey()+" = new CVoletFenetre (\""+entry.getKey()+"\", TypeAppareil.VOLET);\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 1:
       str+=" CChauffage "+entry.getKey()+" = new CChauffage(\""+entry.getKey()+"\", TypeAppareil.CHAUFFAGE);\n";   
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 2:
       str+=" CVoletFenetre "+entry.getKey()+" = new CVoletFenetre (\""+entry.getKey()+"\", TypeAppareil.FENETRE); \n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 3:
       str+=" CEclairage "+entry.getKey()+" = new CEclairage (\""+entry.getKey()+"\", TypeAppareil.ECLAIRAGE);\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 4:
       str+=" CAlarme "+entry.getKey()+" = new CAlarme (\""+entry.getKey()+"\", TypeAppareil.ALARME);\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 5:
       str+=" CAutreAppareil "+entry.getKey()+" = new CAutreAppareil (\""+entry.getKey()+"\", TypeAppareil.AUTRE_APPAREIL_"+entry.getValue().getAutre()+");\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       }

    }
   


   
   for(Entry <String,Vector<String> >  entry: App_struct.entrySet())
   {
        
         str+=" CEnsAppareil "+entry.getKey()+" = new CEnsAppareil(\""+entry.getKey()+"\");\n";
       for(String string : entry.getValue())
       {
        str+=entry.getKey()+".addAppareil("+string+");\n";
          
       }

   str+="ma_liste_ens_appareils.add("+entry.getKey()+"); \n"; 

   }

     
     for(Entry <String,Entree>  entry: Inter_simple.entrySet())
   {
       
       switch (entry.getValue().getType())
       {
       case 0:
       str+=" CInterface "+entry.getKey()+" = new CInterface (\""+entry.getKey()+"\", TypeInterface.INTERRUPTEUR);\n"; 
       str+=" ma_liste_interfaces.add("+entry.getKey()+");\n";
       break;
       case 1:
       str+=" CInterface "+entry.getKey()+" = new CInterface (\""+entry.getKey()+"\", TypeInterface.MOBILE);\n";   
       str+=" ma_liste_interfaces.add("+entry.getKey()+");\n";
       break;
       case 2:
       str+=" CInterface "+entry.getKey()+" = new CInterface (\""+entry.getKey()+"\", TypeInterface.TELECOMMANDE); \n"; 
       str+=" ma_liste_interfaces.add("+entry.getKey()+");\n";
       break;
      
       }

    }
 
       String treated="";
      for(Entry <String,String >  entry: Scenarios.entrySet())
    {
             str+=entry.getValue().replace("*","+");
             str+= "CScenario "+entry.getKey()+" = new CScenario(\""+entry.getKey()+"\","+entry.getKey()+"_contenu ); \n "+
                " ma_liste_scenarios.add("+entry.getKey()+");  \n";
             str+="\n\n\n";
    }


   for(Entry <String,Vector<String> >  entry: commande_struct.entrySet())
   {
        

       for(String string : entry.getValue())
       {
        str+=entry.getKey()+".addScenarioAssocie("+string+");\n";
          
       }



   }



 for(Entry <String,Vector<String> >  entry: Date_struct.entrySet())
   {
        

      

       str+=" CProgrammation p"+i+" = new CProgrammation(\""+entry.getKey()+"\");\n";
 for(String string : entry.getValue())
       {
       str+=" CDate p"+i+"d"+k+"= new CDate "+string+";\n";
       str+=" p"+i+".addDate(p"+i+"d"+k+");\n";
       k++;
       }
       str+=" ma_liste_programmations.add(p"+i+");\n\n"; 
       k=1;
       i++;


   }


 str+="  monHabitat = new HabitatSpecific(ma_liste_appareils,ma_liste_ens_appareils, ma_liste_scenarios,ma_liste_interfaces, ma_liste_programmations);\n}\n}";
             generate_code(str,"CMaisonUser.java");  

    int i=0;
    str="import java.util.ArrayList;\n public class HabitatSpecific extends Habitat {\n public HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog)\n { super(lapp,lens,lscen,lint,lprog); }\n public void execScenarioNum(int num) \n{ System.out.println( \"Execution du scenario \"+this.l_scenarios.get(num).getNomScenario()+\"... \");";
    str+=" \n \n switch(num) {\n";
    for(Entry<String,String> entry:Scenarios.entrySet()){
    str+="\n case "+i+":\n";
    i++;
    
    treated=entry.getValue().replace("+","");
    treated=treated.replaceAll("(\")","");
    treated=treated.replace("\\","\"");
    Pattern p=Pattern.compile("System.out.println\\((\\s)+(.+)\\)");
    Matcher matcher=p.matcher(treated);
    
    while(matcher.find()){
     String temp=matcher.group(2);
     treated=treated.replace(temp,"\""+temp+"\"");
    }
    treated=treated.replace("estAutreAppareil","estTypeAutreAppareil()");
    treated=treated.replace("CAppareil appareil : ensAppareil.l_appareils)","CAppareil appareil : ensAppareil.lAppareils)");
    String tab[]=treated.split("=");
    for(int z=1;z <tab.length;z++)
      str+=tab[z];
    str+="\n break ;\n";

    }
    str+="\n default:  \n } } } \n" ;

generate_code(str,"HabitatSpecific.java"); 

 :} ;

ZONE_APPAREILS ::= Dec_App APPAREILS Dec_AppF;

APPAREILS ::= TYPEA IDFS POINT APPAREILS 
            | TYPEA IDFS POINT
            | STRUCT APPAREILS 
            | STRUCT;

IDFS ::= IDF:k 
   {:    if(type!=5) {if(App_simple.get(k)==null) App_simple.put(k,new Entree(type)); 
       else {
          identifiant_existant(k);
       }
        }
             else {if(App_simple.get(k)==null) App_simple.put(k,new Entree(type,null,autre)); 
             else
             {
                  identifiant_existant(k);

             }
             
             }    
          
:}
 OP5 IDFS 
     
       | IDF:k 
       {:    if(type!=5) { if(App_simple.get(k)==null) App_simple.put(k,new Entree(type)); 
       else
       {
           identifiant_existant(k);
       }
       }
        else {if(App_simple.get(k)==null) { App_simple.put(k,new Entree(type,null,autre)); autre=null; other=false;
        }
        else
        {
        identifiant_existant(k);

        }
        }
        
:}
       | error OP5 IDFS 
       | error; 

OP5 ::= V 
     | error;

TYPEA ::= VOLET {: type=0; RESULT="VOLET"; :}
        | CHAUFFAGE {: type=1; RESULT="CHAUFFAGE";:}
        | FENETRE  {: type=2; RESULT="FENETRE"; :}
        | ECLAIRAGE {: type=3; RESULT="ECLAIRAGE";:}
        | ALARME  {: type=4; RESULT="ALARME";:}
        | AUTRE_VIDE PG AUTRE:s PD {: type=5; if(s.equals("cafetiere")) 
        
        { RESULT="CAFE";autre="CAFE";} else {
            RESULT="HIFI";
            autre="HIFI";}
           other=true;  :}; // recup quel autre switch case

STRUCT ::= definir IDF:k EGAL AG IDFSS AD POINT
{: 
   App_struct.put(k,v);
   v=new Vector<String>();
 :}
; 


IDFSS::=  IDF:k OP5 IDFSS 
       {: v.add(k);
       
       :}
       | IDF:k
       {: v.add(k); :}
       | error OP5 IDFSS
       | error; 

ZONE_COMMUNE ::= ZONE_INTERFACES 
               | ZONE_SCENARII ;
ZONE_INTERFACES ::= Dec_Int INTERFACES Dec_IntF 
                  | Dec_Int INTERFACES Dec_IntF ZONE_SCENARII;

INTERFACES ::= TYPEI IDFSSS POINT INTERFACES 
             | TYPEI IDFSSS POINT;

TYPEI ::= INTERRUPTEUR {: typei=0; RESULT="INTERRUPTEUR";:}
        | MOBILE {: typei=1; RESULT="MOBILE";:}
        | TELECOMMANDE {: typei=2; RESULT="TELECOMMANDE";:};

IDFSSS ::= IDF:k OP5 IDFSSS
 {:if(typei==0 || typei==1 || typei==2 ){
             if(Inter_simple.get(k) == null && App_simple.get(k)==null)
               {Inter_simple.put(k,new Entree(typei));}
	     else
               {identInst_existant(k);} 
             }:}
         | IDF:k
 {:if(typei==0 || typei==1 || typei==2 ){
             if(Inter_simple.get(k) == null && App_simple.get(k)==null)
               {Inter_simple.put(k,new Entree(typei));}
	     else
               {identInst_existant(k);} 
             }:}
         | error; 

ZONE_SCENARII ::= Dec_Sce SCENARIOS Dec_SceF;



    

SCENARIOS ::= Scenario OP4:k CD INST ScenarioF OP4:k1 CD {:  
  


    if(k!=null && k1!=null) // pas d'erreur lors de la déclaration du scénario
    {
      if(Scenarios.get(k)==null && App_simple.get(k)==null && App_struct.get(k)==null && k1.equals(k))
      {
         if(!scenario_contenu.isEmpty())
         {int index=scenario_contenu.lastIndexOf("+");
         scenario_contenu=scenario_contenu.substring(0,index)+scenario_contenu.substring(index+1);
         }
         scenario_contenu="String "+k+"_contenu ="+scenario_contenu+";\n"; 
         Scenarios.put(k,scenario_contenu);
         scenario_contenu="";
         
      } 
      else 
       { 
        if(!k.equals(k1))
        {
        scenario_fermé(k,k1);
         scenario_contenu="";
        }
        else
        {
         scenario_existant(k);
         scenario_contenu="";
        }
       }  
    } 
    else
    {
      scenario_contenu="";
    }   
    :} SCENARIOS
   
            | Scenario OP4:k CD INST ScenarioF OP4:k1 CD
  {:  
    

    if(k!=null && k1!=null) // pas d'erreur lors de la déclaration du scénario
    {
      if(Scenarios.get(k)==null && App_simple.get(k)==null && App_struct.get(k)==null && k1.equals(k))
      {
         if(!scenario_contenu.isEmpty())
         {int index=scenario_contenu.lastIndexOf("+");
         scenario_contenu=scenario_contenu.substring(0,index)+scenario_contenu.substring(index+1);
         }
         scenario_contenu="String "+k+"_contenu ="+scenario_contenu+";\n"; 
         Scenarios.put(k,scenario_contenu);
         scenario_contenu="";
         
      } 
      else 
       { 
         
    if(!k.equals(k1))
        {
        scenario_fermé(k,k1);
         scenario_contenu="";
        }
        else
        {
         scenario_existant(k);
         scenario_contenu="";
        }
       }  
    } 
   else {scenario_contenu="";}    
    :} 
             ;

INST ::= OP 
       | OP INST;

OP ::= BOUCLE  
     | CONDITION
     | MESSAGE
     | SIMPLE 
     | executer_scenario IDF:k POINTV {: 
     List<String> keyIndex = new ArrayList<String>(Scenarios.keySet());
     scenario_contenu+=" \n  \" this.execScenarioNum("+keyIndex.indexOf(k)+"); \" + \n";
     
     :}; 

SIMPLE ::= IDF:k POINT OPERATION:o POINTV
{:

    if(!boucle && !cond)
   {scenario_contenu+=  "\"for(CAppareil appareil : this.l_appareils)   \"  \n + " +
       "    \" if (appareil.getNomAppareil().equals(\\\""+k+"\\\")) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n";
   }
   else
   {
   if(!cond)
     { 
              
         if(!inst_impossible)
      {
        
         if(iterateur!=null)
         {
         scenario_contenu+=" \" for(CEnsAppareil ensAppareil : this.l_ensembles)  \" + \n " +
        "  \" if (ensAppareil.nomEnsAppareil.equals(\\\""+iterateur+"\\\"))   \" + \n ";
        scenario_contenu+=" \" for(CAppareil appareil : ensAppareil.l_appareils) \"   +  \n" ;
        scenario_contenu+= " \" appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+"); \" + \n";

         }
         else
       {
        scenario_contenu+=" \" for(CAppareil appareil : this.l_appareils) \"     \n +" ; 
        if(other)
       { if(autre!=null)
        scenario_contenu+= " \" if (appareil.typeAppareil.equals(TypeAppareil.AUTRE_APPAREIL_"+T+")) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n " ;
         else
        scenario_contenu+= " \" if (appareil.estAutreAppareil) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n " ;
 
 
       }
        else
         scenario_contenu+= " \" if (appareil.typeAppareil.equals(TypeAppareil."+T+")) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n " ;

       }         
       
       boucle=false;
       iterateur=null;
       other=false;
       autre=null;
     }
     else{ System.out.println("**** "+T+inst_impossible);scenario_contenu=scenario_contenu;inst_impossible=false;}
     }
     else
    {
       
       scenario_contenu+=" \" for(CAppareil appareil : this.l_appareils)  \" + \n   " +
       "  \" if (appareil.getNomAppareil().equals(\\\""+iterateur+"\\\")) \" + \n     " ; 
      scenario_contenu+= " \" if (appareil.etatAppareil.equals(TypeEtatAppareil."+T.toUpperCase()+")) \" + \n ";
     
       if(!k.equals(iterateur))
      {
     scenario_contenu+=" \" { for(CAppareil appareil2 : this.l_appareils)  \" + \n " +
       " \"  if (appareil2.getNomAppareil().equals(\\\""+k+"\\\")) \" +  \n    " ;
     scenario_contenu+= " \" appareil2.appliquer(TypeActionAppareil."+o.toUpperCase()+");  " ;  
      }
      else
       scenario_contenu+= " \" appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  " ;
      
       scenario_contenu+= !k.equals(iterateur)? " } \" + \n"  : "\" \n +";
       cond=false;
       iterateur=null;
    }   

   }  

  

:}
         | error POINT OPERATION POINTV ;

BOUCLE ::= POURTOUT OP4:k  DPOINT TYPEA:t     {: 
     if(Scenarios.get(k)!=null || App_simple.get(k)!=null || App_struct.get(k)!=null)
     {
       boucle_impossible(k);
       inst_impossible=true;
     }   
   boucle=true;
   T=t;
  
  :}  FAIRE INST FAIT POINTV 
 
         | POURTOUT OP4:k   DPOINT AUTRE_VIDE    {:
        if(Scenarios.get(k)!=null || App_simple.get(k)!=null || App_struct.get(k)!=null)
     {
       boucle_impossible(k);
       inst_impossible=true;
  
     }  
       
       
         other=true;
         boucle=true;
         :}
       FAIRE INST FAIT POINTV 

      
         | POURTOUT OP4:k  DPOINT   IDF:it    {:
      if(Scenarios.get(k)!=null || App_simple.get(k)!=null || App_struct.get(k)!=null)
     {
       boucle_impossible(k);
       inst_impossible=true;

     }  
      
      
      
       iterateur=it;  
       boucle=true;  

        :}
     FAIRE INST FAIT POINTV  
      ;




OP4 ::= IDF:k {: RESULT=k; :}
      | error;         


CONDITION ::= SI COND ALORS {:
 cond=true;
 
:} INST S


;  

COND ::= PG IDF:k POINT OPERATION_ET DEGAL ETAT:s PD 
 {: T=s;
 iterateur=k;      

:}
        | PG IDF POINT OPERATION_ET DEGAL IDF POINT OPERATION_ET;



S ::= FSI POINTV 
    | SINON {: 
       scenario_contenu+=" \"  else { \" +";
      :} INST FSI POINTV      {:  scenario_contenu+= " \" } \" + \n" ; :} ;                            

MESSAGE ::= message PG {:
      if(cond)
      {   
       scenario_contenu+=" \" for(CAppareil appareil2 : this.l_appareils)  \" + \n   " +
       "  \" if (appareil2.getNomAppareil().equals(\\\""+iterateur+"\\\")) \" + \n     " ; 
      scenario_contenu+= " \" if (appareil2.etatAppareil.equals(TypeEtatAppareil."+T.toUpperCase()+")) \" + \n ";
   
      
       cond=false;
       iterateur=null;
      } 
        
        scenario_contenu+=" \" System.out.println( \" ";
        :}
 PARAMETRES PD POINTV {: scenario_contenu+="+ \"  ); \" +\n";:}
        
;  

PARAMETRES ::= OP2 V {:scenario_contenu+=""; :} PARAMETRES 
             | OP2 ;

OP2::= CHAINE:s {:if(s!=null) scenario_contenu+="+ \" "+s.replace("\"","")+" \"";  :} 
     | IDF:s   {: if(s!=null) scenario_contenu+=" + \" appareil2.getNomAppareil()  \" "; :}
     | IDF:s POINT OPERATION_ET {: if(s!=null) scenario_contenu+= " + \" appareil2.getNomAppareil().etat  \""; :}
    ; 

ZONE_COMMANDE ::= Dec_Com COMMANDES Dec_ComF;

COMMANDES ::= OP3 COMMANDES
            | OP3;

OP3::= associer IDF:k EGAL IDF:j POINT 
       //{:commande_simple.put(k,new Entree(0,k,j)); :}
        {: if(commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null){
          if(VerifidfScenar_code(j)){v.add(j);
          v=new Vector<String>();
          v.add(j); 
          commande_struct.put(k,v);
          v=new Vector<String>();  }else{identSCEN_inex(j);}
          }
          else{
               identComm_existant(k);
              }
        :}
     | associer IDF:k EGAL AG IDFK AD POINT 
       {: 
        if(commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null){
        commande_struct.put(k,v);
        v=new Vector<String>();  }
          else{
               identComm_existant(k);
              }
        :}
     | programmer IDF:k EGAL AG LIST_DATE AD POINT
        {: 
         if(Date_struct.get(k)==null && commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null){
         Date_struct.put(k,v);
         v=new Vector<String>(); }
          else{
              identComm_existant(k);
              }
        :}
     | programmer IDF:T EGAL DATE:l POINT
       //{:Date_simple.put(k,new Entree(0,k,j)); :};
         {: 
          if(Date_struct.get(T) == null && commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null ){
          v=new Vector<String>();
          if(verif_Date(l)==true){
                 String k;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                 if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                        System.out.println(k);v.add(k);
                     }}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                     System.out.println(k); v.add(k);
                    }}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+t[1]+","+i+","+t[3]+","+t[4]+")";
                      System.out.println(k);
                     v.add(k);
                    }}
                    else{ System.out.println("ici");v.add(l);}

                   Date_struct.put(T,v);  
 v=new Vector<String>();
                 }else{Date_erreur(l);}}
          else{  
                  int y=0;
                     Vector<String> vec=Date_struct.get(T);
                     for(String string : vec)
                          {
                
                             if(string.equals(l))
                                 {
                                   identComm_existant(T);
                                    y=1;
                                 }
                         
                          }
                     if(y !=1 && verif_Date(l)==true){
                   if(verif_Date(l)==true){
                 String k;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                 if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                        System.out.println(k);v.add(k);
                     }}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                     System.out.println(k); v.add(k);
                    }}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+t[1]+","+i+","+t[3]+","+t[4]+")";
                      System.out.println(k);
                     v.add(k);
                    }}
                    else{ System.out.println("ici");v.add(l);}         
                            


                            Date_struct.put(T,v);         
                            v=new Vector<String>();}}
                            else{if(y != 1)Date_erreur(l);}
                          
              }
              
          

        :};
IDFK::=  IDF:k OP5 IDFK 
       {: 
         
          if(VerifidfScenar_code(k)){v.add(k);}else{identSCEN_inex(k);}
       
       :}
       | IDF:k
       {:            if(VerifidfScenar_code(k)){v.add(k);}else{identSCEN_inex(k);}
       :}
       | error OP5 IDFK
       | error; 

LIST_DATE ::= DATE:l V LIST_DATE {:  if(verif_Date(l)==true){
                 String k=null;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                 if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+t[1]+","+i+","+t[3]+","+t[4]+")";
                     v.add(k);}}else{ v.add(l);}

                 }else{Date_erreur(l);}:}
            | DATE:l
               {:
                   if(verif_Date(l)==true){
                 String k=null;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                     v.add(k);}}else{ v.add(l);}                            
                 }else{Date_erreur(l);}
               :}; 
          


          



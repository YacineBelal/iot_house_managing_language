/* The following code was generated by JFlex 1.4.1 on 13/12/19 01:43 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 13/12/19 01:43 from the specification file
 * <tt>lexical.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\32\25\0\1\4\1\0\1\5\5\0\1\57\1\6"+
    "\2\0\1\60\1\0\1\61\1\23\12\1\1\62\1\63\1\7\1\64"+
    "\1\22\2\0\1\14\1\2\1\24\1\17\1\16\1\31\1\13\1\2"+
    "\1\27\2\2\1\25\1\15\1\30\1\12\1\10\1\2\1\11\1\21"+
    "\1\26\1\20\5\2\4\0\1\3\1\0\1\36\1\53\1\34\1\54"+
    "\1\33\1\47\1\41\1\45\1\37\1\55\1\2\1\35\1\52\1\50"+
    "\1\43\1\51\1\2\1\40\1\56\1\44\1\46\1\42\1\2\1\67"+
    "\2\2\1\65\1\0\1\66\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\16\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\0\1\21\5\0\17\3"+
    "\1\22\11\3\1\23\2\0\1\24\7\0\1\3\1\25"+
    "\26\3\1\26\10\3\7\0\2\3\1\27\24\3\1\30"+
    "\7\3\10\0\10\3\1\31\4\3\1\32\6\3\1\25"+
    "\1\3\1\33\6\3\1\34\7\0\7\3\1\25\1\35"+
    "\4\3\1\36\11\3\1\37\1\3\10\0\7\3\1\36"+
    "\7\3\1\36\1\3\1\40\2\3\1\41\1\42\7\0"+
    "\10\3\1\43\4\3\1\44\1\3\1\45\10\0\1\46"+
    "\1\3\1\47\10\3\3\0\1\50\3\0\7\3\1\51"+
    "\5\0\1\52\6\3\1\53\4\0\3\3\1\54\1\3"+
    "\1\55\4\0\3\3\7\0\1\3\1\56\12\0\1\3"+
    "\12\0\1\3\1\57\11\0\1\60\4\0\1\61\35\0"+
    "\1\62\6\0\1\63\1\64\2\0\1\65\2\0\1\66"+
    "\1\67\1\70\1\0\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\71\0\u011d"+
    "\0\71\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\71\0\71\0\71\0\71\0\u04e6\0\71\0\71"+
    "\0\u051f\0\344\0\71\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\253"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\71\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\253\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\253\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\253\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\253\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\253\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\253\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u219f"+
    "\0\u22bc\0\253\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\253\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\253\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\253"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf"+
    "\0\253\0\u3018\0\253\0\u3051\0\u308a\0\253\0\253\0\u30c3"+
    "\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b"+
    "\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\253\0\u341a"+
    "\0\u3453\0\u348c\0\u34c5\0\253\0\u34fe\0\253\0\u3537\0\u3570"+
    "\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\253\0\u36ff"+
    "\0\253\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e"+
    "\0\u38c7\0\u3900\0\u3939\0\u3972\0\71\0\u39ab\0\u39e4\0\u3a1d"+
    "\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\253"+
    "\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\71\0\u3d02\0\u3d3b"+
    "\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\71\0\u3e58\0\u3e91\0\u3eca"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\253\0\u3fe7\0\253\0\u4020"+
    "\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8"+
    "\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\253\0\u4377"+
    "\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f"+
    "\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707"+
    "\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\71\0\u485d\0\u4896"+
    "\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\253"+
    "\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\71\0\u4b42\0\u4b7b\0\u4bb4"+
    "\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c"+
    "\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44"+
    "\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3\0\u510c"+
    "\0\u5145\0\u517e\0\71\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b"+
    "\0\u52d4\0\71\0\71\0\u530d\0\u5346\0\71\0\u537f\0\u53b8"+
    "\0\71\0\71\0\71\0\u53f1\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\12\4\1\11\1\12\6\4\1\5\1\13\1\14\1\15"+
    "\1\16\1\17\2\4\1\20\1\21\1\22\1\23\1\4"+
    "\1\24\1\4\1\25\1\26\1\4\1\27\1\4\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\4\1\5\72\0\1\3\1\41\5\0\12\41\2\0"+
    "\6\41\1\0\24\41\10\0\1\41\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\24\4\10\0\1\4\1\0"+
    "\5\42\1\43\1\0\62\42\10\0\1\44\6\0\1\45"+
    "\1\0\1\46\1\0\1\47\70\0\1\50\46\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\4\1\51\7\4"+
    "\1\52\12\4\10\0\1\53\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\3\4\1\54\6\4\1\55\11\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\3\4\1\56\20\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\2\4\1\57\10\4"+
    "\1\60\7\4\1\61\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\15\4\1\62\6\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\63\3\4\1\64\13\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\13\4\1\65"+
    "\10\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\1\66\2\4\1\67\3\4\1\70\14\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\4\4\1\71\17\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\72\2\4\1\73"+
    "\17\4\1\74\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\5\4\1\75\2\4\1\76\13\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\1\77\7\4\1\100\13\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\1\101\23\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\4\4\1\102\17\4\10\0\1\4\2\0\1\103"+
    "\1\0\1\104\151\0\1\105\5\0\3\41\4\0\12\41"+
    "\2\0\6\41\1\0\24\41\10\0\1\41\12\0\1\106"+
    "\75\0\1\107\76\0\1\110\54\0\1\111\6\0\1\112"+
    "\1\0\1\113\47\0\32\114\1\0\36\114\1\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\2\4\1\115\5\4"+
    "\1\116\13\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\1\117\2\4\1\120\20\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\121\23\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\14\4\1\122\7\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\3\4"+
    "\1\123\20\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\7\4\1\124\14\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\2\4"+
    "\1\125\1\126\4\4\1\127\13\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\11\4\1\130"+
    "\12\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\23\4\1\131\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\11\4\1\132\12\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\21\4\1\133\2\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\2\4\1\134\21\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\7\4\1\135\14\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\2\4\1\136\21\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\17\4\1\137\1\140\3\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\14\4\1\141"+
    "\7\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\5\4\1\142\7\4\1\143\6\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\144\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\4\4\1\145\17\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\10\4\1\146\13\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\5\4\1\147\5\4\1\150"+
    "\10\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\23\4\1\151\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\20\4\1\152\3\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\14\4\1\153\2\4\1\154\4\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\15\4"+
    "\1\155\6\4\10\0\1\4\2\0\1\103\56\0\1\156"+
    "\70\0\1\156\22\0\1\157\102\0\1\160\62\0\1\161"+
    "\63\0\1\162\75\0\1\163\76\0\1\164\44\0\32\114"+
    "\1\5\36\114\1\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\3\4\1\165\20\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\4\4\1\166\17\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\11\4\1\167\12\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\4\1\170\22\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\1\171\23\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\13\4\1\172\10\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\173\23\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\13\4\1\174\10\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\5\4"+
    "\1\175\16\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\5\4\1\176\16\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\5\4"+
    "\1\177\16\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\10\4\1\200\13\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\1\201"+
    "\23\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\1\202\23\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\203\23\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\204\4\4\1\205\16\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\206\23\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\207\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\2\4\1\210\21\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\70\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\17\4\1\211\4\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\212\23\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\5\4\1\213\3\4\1\214\12\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\6\4\1\215\15\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\11\4\1\216\12\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\5\4\1\217\16\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\23\4\1\220\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\221\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\4\4\1\222\17\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\116\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\10\4\1\223\13\4\10\0"+
    "\1\4\2\0\1\224\1\0\1\225\100\0\1\226\102\0"+
    "\1\227\73\0\1\230\52\0\1\231\102\0\1\232\62\0"+
    "\1\233\53\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\234\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\15\4\1\235\6\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\13\4\1\236\10\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\11\4\1\237\12\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\14\4\1\240\7\4\10\0\1\4\2\0\2\4\1\241"+
    "\4\0\12\4\2\0\6\4\1\0\24\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\17\4"+
    "\1\242\4\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\17\4\1\243\4\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\23\4"+
    "\1\244\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\1\245\23\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\4\1\246\22\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\5\4\1\247\16\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\10\4\1\250\13\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\11\4\1\251\12\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\5\4\1\252\16\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\4\4\1\253\17\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\4\1\254\14\4"+
    "\1\255\5\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\23\4\1\256\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\1\257\23\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\1\260\23\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\11\4\1\261\12\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\262\23\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\5\4\1\263\16\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\3\4"+
    "\1\264\20\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\11\4\1\265\12\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\3\4"+
    "\1\266\20\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\2\4\1\267\21\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\15\4"+
    "\1\270\6\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\15\4\1\271\6\4\10\0\1\4"+
    "\2\0\1\224\56\0\1\272\70\0\1\272\21\0\1\273"+
    "\73\0\1\274\70\0\1\275\67\0\1\276\102\0\1\277"+
    "\73\0\1\300\41\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\5\4\1\301\16\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\11\4\1\116\7\4"+
    "\1\302\2\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\11\4\1\303\12\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\4\4"+
    "\1\304\17\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\14\4\1\305\7\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\2\4"+
    "\1\306\4\4\1\307\14\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\310\23\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\311\23\4\10\0\1\4\2\0\2\4\1\312\4\0"+
    "\12\4\2\0\6\4\1\0\24\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\4\4\1\313"+
    "\17\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\5\4\1\314\16\4\10\0\1\4\2\0"+
    "\2\4\1\315\4\0\12\4\2\0\6\4\1\0\24\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\11\4\1\116\12\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\5\4\1\316\16\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\10\4\1\317\13\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\12\4\1\320\11\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\1\321\23\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\11\4\1\322\12\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\5\4\1\323\16\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\3\4\1\324\20\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\4\4\1\325\17\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\10\4\1\326\13\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\6\4\1\327\15\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\1\330\23\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\4\4"+
    "\1\331\17\4\10\0\1\4\2\0\1\332\1\0\1\333"+
    "\101\0\1\334\65\0\1\335\70\0\1\336\70\0\1\337"+
    "\73\0\1\340\70\0\1\341\55\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\3\4\1\342\20\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\5\4"+
    "\1\343\16\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\1\344\23\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\1\345\23\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\3\4\1\346\20\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\4\4\1\347\17\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\3\4\1\350\20\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\5\4\1\351\16\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\3\4\1\352\20\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\353\23\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\13\4\1\354\10\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\16\4\1\355\5\4\10\0"+
    "\1\4\2\0\2\4\1\356\4\0\12\4\2\0\6\4"+
    "\1\0\24\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\17\4\1\357\4\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\10\4"+
    "\1\360\13\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\5\4\1\361\16\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\11\4"+
    "\1\362\12\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\1\363\23\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\17\4\1\364"+
    "\4\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\2\4\1\70\21\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\13\4\1\365"+
    "\10\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\1\366\23\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\5\4\1\367\16\4"+
    "\10\0\1\4\2\0\1\332\56\0\1\370\70\0\1\370"+
    "\25\0\1\371\67\0\1\372\103\0\1\373\55\0\1\374"+
    "\65\0\1\375\70\0\1\376\60\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\6\4\1\377\15\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\1\361"+
    "\23\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\5\4\1\u0100\16\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\5\4\1\u0101"+
    "\16\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\6\4\1\u0102\15\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\15\4\1\u0103"+
    "\6\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\4\4\1\u0104\17\4\10\0\1\4\2\0"+
    "\2\4\1\u0105\4\0\12\4\2\0\6\4\1\0\24\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\16\4\1\u0106\5\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\5\4\1\u0107\16\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\16\4\1\u0108\5\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\5\4\1\u0109\16\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\16\4\1\u010a\5\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\17\4\1\u010b\4\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\15\4\1\362\6\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\u010c\23\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\17\4\1\u010d\4\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\11\4\1\u010e\12\4\10\0"+
    "\1\4\2\0\1\u010f\1\0\1\u0110\102\0\1\u0111\101\0"+
    "\1\u0112\54\0\1\u0113\73\0\1\u0114\67\0\1\u0115\103\0"+
    "\1\u0116\42\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\1\u0117\23\4\10\0\1\4\2\0\2\4\1\u0118\4\0"+
    "\12\4\2\0\6\4\1\0\24\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\1\70\23\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\1\u0119\23\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\6\4\1\u0101\15\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\23\4\1\u011a\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\1\u011b\15\4\1\u010a\5\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\16\4\1\u011c\5\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\11\4\1\u011d\12\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\10\4\1\u011e\13\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\3\4\1\u011f\20\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\3\4\1\u0120\20\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\1\u0121\23\4\10\0\1\4"+
    "\2\0\1\u010f\56\0\1\u0122\70\0\1\u0122\26\0\1\u0123"+
    "\101\0\1\u0124\45\0\1\u0125\101\0\1\u0126\101\0\1\u0127"+
    "\54\0\1\u0128\57\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\23\4\1\u0129\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\23\4\1\u012a\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\1\4"+
    "\1\u012b\22\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\3\4\1\u012c\20\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\1\u012d"+
    "\23\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\22\4\1\70\1\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\5\4\1\u012e"+
    "\16\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\15\4\1\u012f\6\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\5\4\1\u0130"+
    "\16\4\10\0\1\4\2\0\1\u0131\72\0\1\u0132\77\0"+
    "\1\u0133\74\0\1\u0134\101\0\1\u0135\45\0\1\u0136\65\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\1\4\1\u0137"+
    "\22\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\1\u0138\23\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\10\4\1\361\13\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\5\4\1\u0139\16\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\13\4\1\u013a\10\4"+
    "\10\0\1\4\2\0\3\4\4\0\12\4\2\0\6\4"+
    "\1\0\11\4\1\u013b\12\4\10\0\1\4\2\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\21\4\1\u013c\2\4"+
    "\10\0\1\4\2\0\1\u0131\4\0\1\u013d\101\0\1\u013e"+
    "\101\0\1\u013f\43\0\1\u0140\77\0\1\u0141\57\0\3\4"+
    "\4\0\12\4\2\0\6\4\1\0\1\u0142\23\4\10\0"+
    "\1\4\2\0\3\4\4\0\12\4\2\0\6\4\1\0"+
    "\2\4\1\u0143\21\4\10\0\1\4\2\0\3\4\4\0"+
    "\12\4\2\0\6\4\1\0\1\u0144\23\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\5\4"+
    "\1\u0145\16\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\4\4\1\u0146\17\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\1\u0147"+
    "\23\4\10\0\1\4\13\0\1\u0148\61\0\1\u0149\104\0"+
    "\1\u014a\101\0\1\u014b\41\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\15\4\1\u014c\6\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\2\4\1\u0101"+
    "\21\4\10\0\1\4\2\0\3\4\4\0\12\4\2\0"+
    "\6\4\1\0\4\4\1\u014d\17\4\10\0\1\4\2\0"+
    "\3\4\4\0\12\4\2\0\6\4\1\0\1\u014e\23\4"+
    "\10\0\1\4\16\0\1\u014f\67\0\1\u0150\4\0\1\u0151"+
    "\2\0\1\u0152\2\0\1\u0153\53\0\1\u0154\61\0\1\u0155"+
    "\66\0\3\4\4\0\12\4\2\0\6\4\1\0\3\4"+
    "\1\u0156\20\4\10\0\1\4\2\0\3\4\4\0\12\4"+
    "\2\0\6\4\1\0\2\4\1\u0157\21\4\10\0\1\4"+
    "\2\0\3\4\4\0\12\4\2\0\6\4\1\0\2\4"+
    "\1\361\21\4\10\0\1\4\21\0\1\u0158\60\0\1\u0159"+
    "\104\0\1\u015a\56\0\1\u015b\106\0\1\u015c\55\0\1\u015d"+
    "\67\0\1\u015e\4\0\1\u015f\2\0\1\u0160\2\0\1\u0161"+
    "\42\0\3\4\4\0\12\4\2\0\6\4\1\0\5\4"+
    "\1\u0162\16\4\10\0\1\4\22\0\1\u0163\57\0\1\u0164"+
    "\76\0\1\u0165\67\0\1\u0166\101\0\1\u0167\62\0\1\u0168"+
    "\60\0\1\u0169\104\0\1\u016a\56\0\1\u016b\106\0\1\u016c"+
    "\41\0\3\4\4\0\12\4\2\0\6\4\1\0\4\4"+
    "\1\u016d\17\4\10\0\1\4\23\0\1\u016e\62\0\1\u016f"+
    "\104\0\1\u0170\55\0\1\u0171\71\0\1\u0172\73\0\1\u0173"+
    "\57\0\1\u0174\76\0\1\u0175\67\0\1\u0176\101\0\1\u0177"+
    "\43\0\3\4\4\0\12\4\2\0\6\4\1\0\10\4"+
    "\1\u0178\13\4\10\0\1\4\12\0\1\u0179\73\0\1\u017a"+
    "\70\0\1\u017b\65\0\1\u017c\101\0\1\u017d\62\0\1\u017e"+
    "\104\0\1\u017f\55\0\1\u0180\71\0\1\u0181\70\0\1\u0182"+
    "\63\0\1\u0183\107\0\1\u0184\71\0\1\u0185\50\0\1\u0186"+
    "\73\0\1\u0187\70\0\1\u0188\65\0\1\u0189\106\0\1\u018a"+
    "\70\0\1\u018b\60\0\1\u018c\65\0\1\u018d\72\0\1\u018e"+
    "\63\0\1\u018f\107\0\1\u0190\71\0\1\u0191\64\0\1\u0192"+
    "\72\0\1\u0193\57\0\1\u0194\76\0\1\u0195\73\0\1\u0196"+
    "\70\0\1\u0197\60\0\1\u0198\65\0\1\u0199\75\0\1\u019a"+
    "\71\0\1\u019b\67\0\1\u019c\65\0\1\u019d\77\0\1\u019e"+
    "\72\0\1\u019f\57\0\1\u01a0\76\0\1\u01a1\66\0\1\u01a2"+
    "\70\0\1\u01a3\67\0\1\u01a4\70\0\1\u01a5\71\0\1\u01a6"+
    "\67\0\1\u01a7\65\0\1\u01a8\74\0\1\u01a9\70\0\1\u01aa"+
    "\70\0\1\u01ab\67\0\1\u01ac\71\0\1\u01ad\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\20\1\4\11\1\1\2\11\1\1\1\0\1\11\5\0"+
    "\32\1\2\0\1\11\7\0\41\1\7\0\37\1\10\0"+
    "\36\1\7\0\31\1\10\0\26\1\7\0\20\1\10\0"+
    "\13\1\3\0\1\11\3\0\10\1\5\0\1\11\6\1"+
    "\1\11\4\0\6\1\4\0\3\1\7\0\2\1\12\0"+
    "\1\1\12\0\1\1\1\11\11\0\1\1\4\0\1\11"+
    "\35\0\1\11\6\0\2\11\2\0\1\11\2\0\3\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int getYyLine(){
        return yyline+1;
    }
    public int getYyColumn(){
        return yycolumn+1;
    }
    public String getYyText(){
        return yytext();
    }

    boolean ChaineNonFerme=false;
   


 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { if(!ChaineNonFerme) return new Symbol(sym.APPR_DIST);
          }
        case 58: break;
        case 16: 
          { System.out.println("Erreur ligne "+getYyLine()+" colonne "+getYyColumn()+" idf mal forme : "+yytext());
          }
        case 59: break;
        case 39: 
          { if(!ChaineNonFerme) return new Symbol(sym.CHAUFFAGE);
          }
        case 60: break;
        case 21: 
          { if(!ChaineNonFerme) return new Symbol(sym.ETAT,getYyText());
          }
        case 61: break;
        case 32: 
          { if(!ChaineNonFerme) return new Symbol(sym.FENETRE);
          }
        case 62: break;
        case 23: 
          { if(!ChaineNonFerme) return new Symbol(sym.OPERATION_ET,getYyText());
          }
        case 63: break;
        case 52: 
          { if(!ChaineNonFerme) return new Symbol(sym.Dec_Com);
          }
        case 64: break;
        case 1: 
          { System.out.println("Erreur ligne "+getYyLine()+" colonne "+getYyColumn()+ " : "+yytext());
          }
        case 65: break;
        case 30: 
          { if(!ChaineNonFerme) return new Symbol(sym.OPERATION,getYyText());
          }
        case 66: break;
        case 57: 
          { if(!ChaineNonFerme) { 
   
    return new Symbol(sym.Dec_IntF);}
          }
        case 67: break;
        case 17: 
          { if(!ChaineNonFerme) return new Symbol(sym.CHAINE,getYyText());
          }
        case 68: break;
        case 46: 
          { if(!ChaineNonFerme) return new Symbol(sym.AUTRE_VIDE);
          }
        case 69: break;
        case 8: 
          { if(!ChaineNonFerme) return new Symbol(sym.PG);
          }
        case 70: break;
        case 18: 
          { if(!ChaineNonFerme) {return new Symbol(sym.AUTRE,getYyText());}
          }
        case 71: break;
        case 7: 
          { if(!ChaineNonFerme) return new Symbol(sym.CD);
          }
        case 72: break;
        case 47: 
          { if(!ChaineNonFerme) return new Symbol(sym.ProgD);
          }
        case 73: break;
        case 25: 
          { if(!ChaineNonFerme) 
{

return new Symbol(sym.ALORS);}
          }
        case 74: break;
        case 54: 
          { if(!ChaineNonFerme) {

    return new Symbol(sym.Dec_Int);}
          }
        case 75: break;
        case 45: 
          { if(!ChaineNonFerme) return new Symbol(sym.TELECOMMANDE);
          }
        case 76: break;
        case 38: 
          { if(!ChaineNonFerme) return new Symbol(sym.ECLAIRAGE);
          }
        case 77: break;
        case 3: 
          { if(!ChaineNonFerme) return new Symbol(sym.IDF,getYyText());
          }
        case 78: break;
        case 29: 
          { if(!ChaineNonFerme) return new Symbol(sym.ALARME);
          }
        case 79: break;
        case 34: 
          { if(!ChaineNonFerme) 
{
return new Symbol(sym.definir);}
          }
        case 80: break;
        case 6: 
          { if(ChaineNonFerme){
    ChaineNonFerme=false;    
    System.out.println("erreur lexical: chaine non fermée "+getYyLine()+" colonne "+getYyColumn());    
    }  
    return new Symbol(sym.PD);
          }
        case 81: break;
        case 51: 
          { if(!ChaineNonFerme) {
   
    return new Symbol(sym.Dec_App); }
          }
        case 82: break;
        case 15: 
          { if(!ChaineNonFerme) return new Symbol(sym.AD);
          }
        case 83: break;
        case 56: 
          { if(!ChaineNonFerme) return new Symbol(sym.Dec_ComF);
          }
        case 84: break;
        case 20: 
          { if(!ChaineNonFerme) return new Symbol(sym.DEGAL);
          }
        case 85: break;
        case 22: 
          { if(!ChaineNonFerme) 
{

return new Symbol(sym.FSI);}
          }
        case 86: break;
        case 41: 
          { if(!ChaineNonFerme) 
{

return new Symbol(sym.programmer); }
          }
        case 87: break;
        case 37: 
          { if(!ChaineNonFerme) return new Symbol(sym.POURTOUT);
          }
        case 88: break;
        case 10: 
          { if(!ChaineNonFerme) return new Symbol(sym.POINT);
          }
        case 89: break;
        case 24: 
          { if(!ChaineNonFerme) return new Symbol(sym.FAIT);
          }
        case 90: break;
        case 55: 
          { if(!ChaineNonFerme) {
   
    return new Symbol(sym.Dec_AppF);}
          }
        case 91: break;
        case 19: 
          { if(!ChaineNonFerme) 
{
   return new Symbol(sym.SI);}
          }
        case 92: break;
        case 42: 
          { if(!ChaineNonFerme) return new Symbol(sym.ScenarioF,getYyText());
          }
        case 93: break;
        case 27: 
          { if(!ChaineNonFerme) return new Symbol(sym.FAIRE);
          }
        case 94: break;
        case 5: 
          { ChaineNonFerme=true;
    return new Symbol(sym.CHAINE);
          }
        case 95: break;
        case 53: 
          { if(!ChaineNonFerme) return new Symbol(sym.Dec_SceF);
          }
        case 96: break;
        case 44: 
          { if(!ChaineNonFerme) return new Symbol(sym.INTERRUPTEUR);
          }
        case 97: break;
        case 12: 
          { if(!ChaineNonFerme) return new Symbol(sym.POINTV);
          }
        case 98: break;
        case 48: 
          { if(!ChaineNonFerme) 
{
  return new Symbol(sym.executer_scenario);}
          }
        case 99: break;
        case 9: 
          { if(!ChaineNonFerme) return new Symbol(sym.V);
          }
        case 100: break;
        case 33: 
          { if(!ChaineNonFerme) 
{  
return new Symbol(sym.message);}
          }
        case 101: break;
        case 50: 
          { if(!ChaineNonFerme) return new Symbol(sym.Dec_Sce);
          }
        case 102: break;
        case 43: 
          { if(!ChaineNonFerme) return new Symbol(sym.DATE,getYyText());
          }
        case 103: break;
        case 49: 
          { if(!ChaineNonFerme) return new Symbol(sym.ProgDF);
          }
        case 104: break;
        case 40: 
          { if(!ChaineNonFerme) return new Symbol(sym.Scenario,getYyText());
          }
        case 105: break;
        case 31: 
          { if(!ChaineNonFerme) return new Symbol(sym.MOBILE);
          }
        case 106: break;
        case 28: 
          { if(!ChaineNonFerme) 
{

return new Symbol(sym.SINON);}
          }
        case 107: break;
        case 11: 
          { if(!ChaineNonFerme) return new Symbol(sym.DPOINT);
          }
        case 108: break;
        case 2: 
          { if(!ChaineNonFerme) return new Symbol(sym.ENTIER,new Integer(yytext()));
          }
        case 109: break;
        case 26: 
          { if(!ChaineNonFerme) return new Symbol(sym.VOLET);
          }
        case 110: break;
        case 35: 
          { if(!ChaineNonFerme) 
{   
return new Symbol(sym.associer);}
          }
        case 111: break;
        case 13: 
          { if(!ChaineNonFerme) return new Symbol(sym.EGAL);
          }
        case 112: break;
        case 14: 
          { if(!ChaineNonFerme) return new Symbol(sym.AG);
          }
        case 113: break;
        case 4: 
          { 
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

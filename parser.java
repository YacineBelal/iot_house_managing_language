
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Fri Dec 13 16:30:49 CET 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.time.YearMonth;
import java.util.Map.Entry;
import java.io.*;
import java.util.regex.*;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Fri Dec 13 16:30:49 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\003\007\000\002\002\004\000\002\011" +
    "\005\000\002\004\006\000\002\004\005\000\002\004\004" +
    "\000\002\004\003\000\002\042\002\000\002\010\006\000" +
    "\002\010\003\000\002\010\005\000\002\010\003\000\002" +
    "\033\003\000\002\033\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\006\000\002\025\011\000\002\034\005\000" +
    "\002\034\003\000\002\034\005\000\002\034\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\005\000\002\014" +
    "\006\000\002\005\006\000\002\005\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\035\005\000" +
    "\002\035\003\000\002\035\003\000\002\015\005\000\002" +
    "\043\002\000\002\007\013\000\002\007\011\000\002\016" +
    "\003\000\002\016\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\017\006\000\002\017\006\000\002\044\002\000\002" +
    "\020\013\000\002\045\002\000\002\020\013\000\002\046" +
    "\002\000\002\020\013\000\002\037\003\000\002\037\003" +
    "\000\002\047\002\000\002\021\010\000\002\026\011\000" +
    "\002\026\012\000\002\023\004\000\002\050\002\000\002" +
    "\023\007\000\002\051\002\000\002\022\010\000\002\052" +
    "\002\000\002\027\006\000\002\027\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\012\005\000" +
    "\002\006\004\000\002\006\003\000\002\032\007\000\002" +
    "\032\011\000\002\032\011\000\002\032\007\000\002\036" +
    "\005\000\002\036\003\000\002\036\005\000\002\036\003" +
    "\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\042\005\001\002\000\004\002\274\001" +
    "\002\000\004\044\006\001\002\000\020\015\207\016\205" +
    "\035\241\054\204\055\210\056\242\057\206\001\002\000" +
    "\006\050\012\052\011\001\002\000\004\046\uffe7\001\002" +
    "\000\004\033\077\001\002\000\010\017\065\020\063\021" +
    "\061\001\002\000\004\046\uffe8\001\002\000\004\046\016" +
    "\001\002\000\004\043\060\001\002\000\006\036\021\037" +
    "\020\001\002\000\010\036\021\037\020\047\uffb6\001\002" +
    "\000\004\060\037\001\002\000\004\060\024\001\002\000" +
    "\004\047\023\001\002\000\004\043\uffb8\001\002\000\004" +
    "\025\025\001\002\000\006\030\026\061\027\001\002\000" +
    "\004\061\032\001\002\000\004\013\030\001\002\000\010" +
    "\036\uffb2\037\uffb2\047\uffb2\001\002\000\004\031\035\001" +
    "\002\000\006\022\033\031\uffac\001\002\000\004\061\032" +
    "\001\002\000\004\031\uffad\001\002\000\004\013\036\001" +
    "\002\000\010\036\uffb3\037\uffb3\047\uffb3\001\002\000\004" +
    "\025\040\001\002\000\006\030\041\060\042\001\002\000" +
    "\006\003\045\060\046\001\002\000\004\013\043\001\002" +
    "\000\010\036\uffb5\037\uffb5\047\uffb5\001\002\000\004\031" +
    "\055\001\002\000\010\003\050\022\047\031\uffae\001\002" +
    "\000\010\003\050\022\047\031\uffb0\001\002\000\006\003" +
    "\ufff5\060\ufff5\001\002\000\006\003\ufff4\060\ufff4\001\002" +
    "\000\006\003\045\060\046\001\002\000\004\031\uffb1\001" +
    "\002\000\006\003\045\060\046\001\002\000\004\031\uffaf" +
    "\001\002\000\004\013\056\001\002\000\010\036\uffb4\037" +
    "\uffb4\047\uffb4\001\002\000\004\047\uffb7\001\002\000\004" +
    "\002\001\001\002\000\006\003\uffe2\060\uffe2\001\002\000" +
    "\004\051\075\001\002\000\006\003\uffe1\060\uffe1\001\002" +
    "\000\006\003\066\060\067\001\002\000\006\003\uffe0\060" +
    "\uffe0\001\002\000\004\013\uffdd\001\002\000\010\003\050" +
    "\013\uffde\022\047\001\002\000\004\013\071\001\002\000" +
    "\012\017\065\020\063\021\061\051\uffe3\001\002\000\004" +
    "\051\uffe4\001\002\000\006\003\066\060\067\001\002\000" +
    "\004\013\uffdf\001\002\000\006\046\uffe6\052\011\001\002" +
    "\000\004\046\uffe5\001\002\000\006\003\103\060\104\001" +
    "\002\000\004\053\101\001\002\000\004\046\uffdc\001\002" +
    "\000\004\032\105\001\002\000\006\023\uffc8\032\uffc8\001" +
    "\002\000\006\023\uffc9\032\uffc9\001\002\000\016\003\117" +
    "\004\120\007\112\040\121\041\115\060\110\001\002\000" +
    "\026\003\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3" +
    "\034\uffd3\040\uffd3\041\uffd3\060\uffd3\001\002\000\026\003" +
    "\117\004\120\006\uffd8\007\112\010\uffd8\012\uffd8\034\uffd8" +
    "\040\121\041\115\060\110\001\002\000\004\013\233\001" +
    "\002\000\026\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\012\uffd6\034\uffd6\040\uffd6\041\uffd6\060\uffd6\001\002\000" +
    "\006\003\103\060\104\001\002\000\004\034\172\001\002" +
    "\000\026\003\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4\012" +
    "\uffd4\034\uffd4\040\uffd4\041\uffd4\060\uffd4\001\002\000\004" +
    "\060\170\001\002\000\026\003\uffd5\004\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\012\uffd5\034\uffd5\040\uffd5\041\uffd5\060\uffd5" +
    "\001\002\000\004\013\165\001\002\000\004\026\137\001" +
    "\002\000\004\026\122\001\002\000\006\060\uffc0\062\uffc0" +
    "\001\002\000\006\060\125\062\127\001\002\000\006\022" +
    "\134\027\uffbc\001\002\000\010\013\132\022\uffba\027\uffba" +
    "\001\002\000\004\027\130\001\002\000\006\022\uffbb\027" +
    "\uffbb\001\002\000\004\014\131\001\002\000\026\003\uffbf" +
    "\004\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\034\uffbf\040" +
    "\uffbf\041\uffbf\060\uffbf\001\002\000\004\066\133\001\002" +
    "\000\006\022\uffb9\027\uffb9\001\002\000\006\060\uffbe\062" +
    "\uffbe\001\002\000\006\060\125\062\127\001\002\000\004" +
    "\027\uffbd\001\002\000\004\060\154\001\002\000\004\005" +
    "\141\001\002\000\016\003\uffc7\004\uffc7\007\uffc7\040\uffc7" +
    "\041\uffc7\060\uffc7\001\002\000\016\003\117\004\120\007" +
    "\112\040\121\041\115\060\110\001\002\000\006\006\146" +
    "\010\144\001\002\000\016\003\uffc2\004\uffc2\007\uffc2\040" +
    "\uffc2\041\uffc2\060\uffc2\001\002\000\026\003\uffc6\004\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\034\uffc6\040\uffc6\041" +
    "\uffc6\060\uffc6\001\002\000\004\014\147\001\002\000\026" +
    "\003\uffc3\004\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\034" +
    "\uffc3\040\uffc3\041\uffc3\060\uffc3\001\002\000\016\003\117" +
    "\004\120\007\112\040\121\041\115\060\110\001\002\000" +
    "\004\006\152\001\002\000\004\014\153\001\002\000\026" +
    "\003\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\034" +
    "\uffc1\040\uffc1\041\uffc1\060\uffc1\001\002\000\004\013\155" +
    "\001\002\000\004\066\156\001\002\000\004\024\157\001" +
    "\002\000\006\060\160\065\161\001\002\000\004\013\163" +
    "\001\002\000\004\027\162\001\002\000\004\005\uffc5\001" +
    "\002\000\004\066\164\001\002\000\004\005\uffc4\001\002" +
    "\000\004\064\166\001\002\000\004\014\167\001\002\000" +
    "\026\003\uffd0\004\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0" +
    "\034\uffd0\040\uffd0\041\uffd0\060\uffd0\001\002\000\004\014" +
    "\171\001\002\000\026\003\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\012\uffd2\034\uffd2\040\uffd2\041\uffd2\060\uffd2\001" +
    "\002\000\006\003\103\060\104\001\002\000\004\032\174" +
    "\001\002\000\006\033\uffdb\053\uffd9\001\002\000\004\033" +
    "\077\001\002\000\004\053\uffda\001\002\000\004\023\200" +
    "\001\002\000\020\015\207\016\205\054\204\055\210\056" +
    "\203\057\206\060\202\001\002\000\004\011\uffcf\001\002" +
    "\000\004\011\uffcb\001\002\000\006\011\uffcd\026\211\001" +
    "\002\000\010\003\ufff1\011\ufff1\060\ufff1\001\002\000\010" +
    "\003\ufff0\011\ufff0\060\ufff0\001\002\000\010\003\ufff2\011" +
    "\ufff2\060\ufff2\001\002\000\010\003\ufff3\011\ufff3\060\ufff3" +
    "\001\002\000\010\003\uffef\011\uffef\060\uffef\001\002\000" +
    "\004\063\217\001\002\000\004\011\213\001\002\000\016" +
    "\003\117\004\120\007\112\040\121\041\115\060\110\001" +
    "\002\000\004\012\215\001\002\000\004\014\216\001\002" +
    "\000\026\003\uffcc\004\uffcc\006\uffcc\007\uffcc\010\uffcc\012" +
    "\uffcc\034\uffcc\040\uffcc\041\uffcc\060\uffcc\001\002\000\004" +
    "\027\220\001\002\000\010\003\uffee\011\uffee\060\uffee\001" +
    "\002\000\004\011\222\001\002\000\016\003\117\004\120" +
    "\007\112\040\121\041\115\060\110\001\002\000\004\012" +
    "\224\001\002\000\004\014\225\001\002\000\026\003\uffca" +
    "\004\uffca\006\uffca\007\uffca\010\uffca\012\uffca\034\uffca\040" +
    "\uffca\041\uffca\060\uffca\001\002\000\004\011\227\001\002" +
    "\000\016\003\117\004\120\007\112\040\121\041\115\060" +
    "\110\001\002\000\004\012\231\001\002\000\004\014\232" +
    "\001\002\000\026\003\uffce\004\uffce\006\uffce\007\uffce\010" +
    "\uffce\012\uffce\034\uffce\040\uffce\041\uffce\060\uffce\001\002" +
    "\000\004\064\234\001\002\000\004\014\235\001\002\000" +
    "\026\003\uffd1\004\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1" +
    "\034\uffd1\040\uffd1\041\uffd1\060\uffd1\001\002\000\012\006" +
    "\uffd7\010\uffd7\012\uffd7\034\uffd7\001\002\000\006\003\262" +
    "\060\263\001\002\000\022\015\207\016\205\035\241\045" +
    "\ufffb\054\204\055\210\056\242\057\206\001\002\000\004" +
    "\060\245\001\002\000\004\026\211\001\002\000\004\045" +
    "\244\001\002\000\006\050\uffff\052\uffff\001\002\000\004" +
    "\025\246\001\002\000\004\030\247\001\002\000\006\003" +
    "\251\060\252\001\002\000\004\031\257\001\002\000\010" +
    "\003\050\022\047\031\uffe9\001\002\000\010\003\050\022" +
    "\047\031\uffeb\001\002\000\006\003\251\060\252\001\002" +
    "\000\004\031\uffec\001\002\000\006\003\251\060\252\001" +
    "\002\000\004\031\uffea\001\002\000\004\013\260\001\002" +
    "\000\022\015\uffed\016\uffed\035\uffed\045\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\001\002\000\004\045\ufffc\001\002" +
    "\000\010\003\050\013\ufff6\022\047\001\002\000\010\003" +
    "\ufffa\013\ufff8\022\ufffa\001\002\000\004\013\265\001\002" +
    "\000\022\015\207\016\205\035\241\045\ufffd\054\204\055" +
    "\210\056\242\057\206\001\002\000\004\045\ufffe\001\002" +
    "\000\006\003\050\022\047\001\002\000\006\003\262\060" +
    "\263\001\002\000\004\013\ufff9\001\002\000\006\003\262" +
    "\060\263\001\002\000\004\013\ufff7\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\011\006\001\001\000\010\004\242\025\237\040\236" +
    "\001\001\000\010\013\013\014\012\015\007\001\001\000" +
    "\002\001\001\000\004\007\077\001\001\000\006\005\061" +
    "\041\063\001\001\000\002\001\001\000\004\012\014\001" +
    "\001\000\002\001\001\000\006\006\021\032\016\001\001" +
    "\000\006\006\056\032\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\052\001\001" +
    "\000\004\033\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\051\001\001\000\002\001\001\000\004" +
    "\036\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\072\001\001\000\002\001\001\000\006\005\071\041" +
    "\063\001\001\000\002\001\001\000\004\035\073\001\001" +
    "\000\002\001\001\000\004\015\075\001\001\000\002\001" +
    "\001\000\004\037\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\112\017\105\020\110\021\115\022\113" +
    "\030\106\001\001\000\002\001\001\000\016\016\235\017" +
    "\105\020\110\021\115\022\113\030\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\137\001\001\000" +
    "\002\001\001\000\004\051\122\001\001\000\006\027\125" +
    "\031\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\134\001\001\000\006\027\135\031\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\141\001\001\000\016\016\142\017\105\020\110\021\115" +
    "\022\113\030\106\001\001\000\004\023\144\001\001\000" +
    "\004\050\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\150\017\105\020\110\021" +
    "\115\022\113\030\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\172\001\001\000\002\001\001\000\004\043\174\001\001" +
    "\000\004\007\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\200\001\001\000\004\044\225\001\001" +
    "\000\004\046\220\001\001\000\004\045\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\213\017\105\020\110\021\115\022\113" +
    "\030\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\222\017\105\020\110\021\115\022" +
    "\113\030\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\227\017" +
    "\105\020\110\021\115\022\113\030\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\263\001\001\000\010\004\260\025\237\040" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\247\001\001\000\002\001\001\000\004" +
    "\033\254\001\001\000\004\033\252\001\001\000\004\034" +
    "\253\001\001\000\002\001\001\000\004\034\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\271\001\001\000\004\042\266" +
    "\001\001\000\002\001\001\000\010\004\265\025\237\040" +
    "\236\001\001\000\002\001\001\000\004\033\267\001\001" +
    "\000\004\010\270\001\001\000\002\001\001\000\004\010" +
    "\272\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}


public String tokenToString (Symbol token) {
// qqs exemples pour voir...
     switch (token.sym) {
	case sym.SI : return "SI"; 
    case sym.ALORS : return "ALORS";
    case sym.SINON : return "SINON";
    case sym.FSI : return "FSI";
	case sym.CHAINE : return "CHAINE "+token.value;  
	case sym.ENTIER : return "ENTIER "+token.value;  
	case sym.POURTOUT : return "POURTOUT";
    case sym.FAIRE : return "FAIRE";
    case sym.FAIT : return "FAIT";
	case sym.POINT : return ".";
    case sym.POINTV : return ";";
    case sym.V : return ",";
    case sym.DPOINT : return ":";
    case sym.DEGAL : return "==";
    case sym.EGAL : return "=";
    case sym.PG : return "(";
    case sym.PD : return ")";
    case sym.AG : return "{";
    case sym.AD : return "}";
    case sym.definir : return "definir";
    case sym.programmer : return "programmer";
    case sym.associer : return "associer";
    case sym.message : return "message";
    case sym.executer_scenario : return "executer_scenario";
    case sym.ProgD : return  "<PROGRAMME_DOMUS>";
    case sym.ProgDF : return "</ROGRAMME_DOMUS>";
    case sym.Dec_App : return "<DECLARATION_APPAREILS>" ;
    case sym.Dec_AppF : return "</DECLARATION_APPAREILS>" ;
    case sym.Dec_Int : return "<DECLARATION_INTERFACES>" ;
    case sym.Dec_IntF : return "</DECLARATION_INTERFACES>" ; 
    case sym.Dec_Sce : return "<DECLARATION_SCENARII>";
    case sym.Dec_SceF : return "<DECLARATION_SCENARII>";
    case sym.Scenario : return ""+token.value ;
    case sym.ScenarioF : return ""+token.value ;
    case sym.Dec_Com : return "<DECLARATION_COMMANDES>" ;
    case sym.Dec_ComF : return "</DECLARATION_COMMANDES>" ;
    case sym.ECLAIRAGE : return "ECLAIRAGE" ;
    case sym.VOLET : return "VOLET" ;
    case sym.FENETRE : return "FENETRE" ;
    case sym.CHAUFFAGE : return "CHAUFFAGE" ;
    case sym.ALARME : return "ALARME" ;
    case sym.AUTRE : return "AUTRE"+token.value;
    case sym.APPR_DIST : return "APPR_DIST" ;
    case sym.DATE : return " DATE "+token.value ;
    case sym.OPERATION : return "OPERATION" ;
    case sym.OPERATION_ET : return "OPERATION_ETAT" ;
	case sym.ETAT : return "ETAT " ;
    case sym.IDF : return "IDF "+token.value ;
    case sym.CD : return "CD "+token.value ;
	case sym.AUTRE_VIDE : return "AUTRE_VIDE";


   
      

	default : return "Token imprévu ou error";
	}
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



Vector<String> v=new Vector<String>();   
int type=0;
int typei=0;
int i=1;
int k=1;
String[] t;
String autre;
String ensemble=null;
String scenario_contenu="";
String T;
boolean boucle;
boolean cond;
boolean other=false;
String iterateur=null;
HashMap <String,Entree> App_simple = new LinkedHashMap<String, Entree>();
HashMap <String,Entree> Inter_simple = new LinkedHashMap<String, Entree>();
//HashMap <String,Entree> Date_simple = new LinkedHashMap<String, Entree>();
HashMap <String,Vector<String>> commande_struct = new LinkedHashMap<String, Vector<String>>();
HashMap <String,Vector<String>> App_struct = new LinkedHashMap<String,Vector<String>>();
HashMap <String,Vector<String>> Date_struct = new LinkedHashMap<String, Vector<String>>();
HashMap <String,String> Scenarios = new LinkedHashMap<String, String>();
String msg=null;
boolean inst_impossible=false;
      
void exemple_de_fonction(String i1, String i2)
{
	String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
	if (!(i1.equals(i2))) parser.report_error(m,null);	 
}

void identifiant_existant(String id)
{
String m= "l'identifiant "+id+" est déja déclaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void identInst_existant(String id)
{
String m= "l'identifiant "+id+" est déja déclaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void Date_erreur(String id)
{
String m= "la Date "+id+" n'est pas Valide! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void identComm_existant(String id)
{
String m= "l'identifiant "+id+" est déja déclaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}
void scenario_existant(String id)
{
String m= "Scenario "+id+" ne peut etre déclaré car l'identifiant "+id+" a déja été délcaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}

void scenario_fermé(String id,String id2)
{
String m= "le scenario "+id+" a été fermé avec l'identifiant "+id2+" erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}

void boucle_impossible(String id)
{
String m= "La boucle ne pourra etre exécuté car l'identifiant "+id+"  a déja été délcaré! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);

}

boolean verif_Date(String l)
{
                 String k=null;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
        
            if(t[0].equals("_") || Integer.parseInt(t[0]) < 2999 && Integer.parseInt(t[0]) >= 2000)
                  {
                     if(t[1].equals("_") || Integer.parseInt(t[1]) < 13 && Integer.parseInt(t[1]) > 0)
                         {
                         if(t[1].equals("_") || Integer.parseInt(t[1]) == 1 || Integer.parseInt(t[1]) == 3 || Integer.parseInt(t[1]) ==5 || Integer.parseInt(t[1]) == 7 ||Integer.parseInt(t[1]) == 8 
|| Integer.parseInt(t[1]) == 10 || Integer.parseInt(t[1]) ==12)
                                   {
                                      if(t[2].equals("_")  || Integer.parseInt(t[2]) < 32 && Integer.parseInt(t[2])> 0 )
                                          {
                                      if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                      if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                           }else{return false;}
                                   }else if(t[1].equals("_") || Integer.parseInt(t[1]) == 4 || Integer.parseInt(t[1]) == 6 || Integer.parseInt(t[1]) ==9 || Integer.parseInt(t[1]) == 11)
                                    {
                            if(t[2].equals("_") || Integer.parseInt(t[2]) < 31 && Integer.parseInt(t[2])> 0 )
                                          {
                                 if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                      if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                          }else{return false;}
                                    }else if (Integer.parseInt(t[1]) ==2)
                                           {
                                              if(Integer.parseInt(t[0]) % 4 ==0 && Integer.parseInt(t[0])% 100 != 0 
                                               || Integer.parseInt(t[0]) % 400 == 0){
                      if(t[2].equals("_") || Integer.parseInt(t[2]) < 30 && Integer.parseInt(t[2])> 0)
                                          {
                                    if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                       if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                           }else{return false;}
					
						}else{
                                         if(t[2].equals("_") || Integer.parseInt(t[2]) < 29 && Integer.parseInt(t[2])> 0)
                                          {
                                       if(t[3].equals("_") || Integer.parseInt(t[3]) < 24 && Integer.parseInt(t[3])>= 0)
                                                  {
                                      if(t[4].equals("_") || Integer.parseInt(t[4]) < 60 && Integer.parseInt(t[4])>= 0)
                                                       {
							return true;
							}else{return false;}
						}else{return false;}
                                           }
                                   else{return false;}
				}
                              
                              }else{return false;}
                         }else{return false;}
                  }else{return false;}
}
boolean VerifidfScenar_code(String K) throws IOException
 {
     int p=0;
           String vec=Scenarios.get(k);
           
                          if(vec==null || !vec.equals(k)){return false;}
                               else {return true;}
       
 }
void identSCEN_inex(String K) throws IOException
 {
    
    String m= "l'identifiant "+K+" n'existe pas! erreur semantique ligne : "+parser.pline()+" colonne :"+parser.pcolumn();
parser.report_error(m,null);
   
 }
void generate_code (String str,String path) throws IOException
 {
  FileWriter writer=new FileWriter("./test/code_domus/"+path);
  PrintWriter printer=new PrintWriter(writer);
  printer.print(str);
  printer.close();
 }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_DATE ::= DATE 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   if(verif_Date(l)==true){
                 String k=null;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                     v.add(k);}}else{ v.add(l);}                            
                 }else{Date_erreur(l);}
               
              CUP$parser$result = new java_cup.runtime.Symbol(18/*LIST_DATE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_DATE ::= DATE V LIST_DATE 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if(verif_Date(l)==true){
                 String k=null;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                 if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                    v.add(k);}}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+t[1]+","+i+","+t[3]+","+t[4]+")";
                     v.add(k);}}else{ v.add(l);}

                 }else{Date_erreur(l);}
              CUP$parser$result = new java_cup.runtime.Symbol(18/*LIST_DATE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IDFK ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*IDFK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IDFK ::= error OP5 IDFK 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*IDFK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IDFK ::= IDF 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		            if(VerifidfScenar_code(k)){v.add(k);}else{identSCEN_inex(k);}
       
              CUP$parser$result = new java_cup.runtime.Symbol(28/*IDFK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IDFK ::= IDF OP5 IDFK 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
         
          if(VerifidfScenar_code(k)){v.add(k);}else{identSCEN_inex(k);}
       
       
              CUP$parser$result = new java_cup.runtime.Symbol(28/*IDFK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP3 ::= programmer IDF EGAL DATE POINT 
            {
              Object RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String T = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
          if(Date_struct.get(T) == null && commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null ){
          v=new Vector<String>();
          if(verif_Date(l)==true){
                 String k;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                 if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                        System.out.println(k);v.add(k);
                     }}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                     System.out.println(k); v.add(k);
                    }}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+t[1]+","+i+","+t[3]+","+t[4]+")";
                      System.out.println(k);
                     v.add(k);
                    }}
                    else{ System.out.println("ici");v.add(l);}

                   Date_struct.put(T,v);  
 v=new Vector<String>();
                 }else{Date_erreur(l);}}
          else{  
                  int y=0;
                     Vector<String> vec=Date_struct.get(T);
                     for(String string : vec)
                          {
                
                             if(string.equals(l))
                                 {
                                   identComm_existant(T);
                                    y=1;
                                 }
                         
                          }
                     if(y !=1 && verif_Date(l)==true){
                   if(verif_Date(l)==true){
                 String k;
                 k=l.replace("(","");
                 k=k.replace(")","");
                 t=k.split(",");
                 k="";
                 System.out.println(l);
                 if(t[0].equals("_")){for(int i=0;i<5;i++)
                    {  k="("+(2019+i)+","+t[1]+","+t[2]+","+t[3]+","+t[4]+")";
                        System.out.println(k);v.add(k);
                     }}
                 else if(t[1].equals("_")){for(int i=1;i<13;i++)
                    {k="("+t[0]+","+i+","+t[2]+","+t[3]+","+t[4]+")";
                     System.out.println(k); v.add(k);
                    }}
                  else if(t[2].equals("_")){for(int i=1;i<31;i++)
                    {k="("+t[0]+","+t[1]+","+i+","+t[3]+","+t[4]+")";
                      System.out.println(k);
                     v.add(k);
                    }}
                    else{ System.out.println("ici");v.add(l);}         
                            


                            Date_struct.put(T,v);         
                            v=new Vector<String>();}}
                            else{if(y != 1)Date_erreur(l);}
                          
              }
              
          

        
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OP3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP3 ::= programmer IDF EGAL AG LIST_DATE AD POINT 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
         if(Date_struct.get(k)==null && commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null){
         Date_struct.put(k,v);
         v=new Vector<String>(); }
          else{
              identComm_existant(k);
              }
        
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OP3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP3 ::= associer IDF EGAL AG IDFK AD POINT 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
        if(commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null){
        commande_struct.put(k,v);
        v=new Vector<String>();  }
          else{
               identComm_existant(k);
              }
        
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OP3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP3 ::= associer IDF EGAL IDF POINT 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(commande_struct.get(k)==null && Inter_simple.get(k) == null && App_simple.get(k)==null){
          if(VerifidfScenar_code(j)){v.add(j);
          v=new Vector<String>();
          v.add(j); 
          commande_struct.put(k,v);
          v=new Vector<String>();  }else{identSCEN_inex(j);}
          }
          else{
               identComm_existant(k);
              }
        
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OP3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COMMANDES ::= OP3 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*COMMANDES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COMMANDES ::= OP3 COMMANDES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*COMMANDES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ZONE_COMMANDE ::= Dec_Com COMMANDES Dec_ComF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*ZONE_COMMANDE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP2 ::= IDF POINT OPERATION_ET 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(s!=null) scenario_contenu+= " + \" appareil2.getNomAppareil().etat  \""; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*OP2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP2 ::= IDF 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if(s!=null) scenario_contenu+=" + \" appareil2.getNomAppareil()  \" "; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*OP2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP2 ::= CHAINE 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		if(s!=null) scenario_contenu+="+ \" "+s.replace("\"","")+" \"";  
              CUP$parser$result = new java_cup.runtime.Symbol(23/*OP2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETRES ::= OP2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*PARAMETRES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETRES ::= OP2 V NT$8 PARAMETRES 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*PARAMETRES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$8 ::= 
            {
              Object RESULT = null;
scenario_contenu+=""; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MESSAGE ::= message PG NT$7 PARAMETRES PD POINTV 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 scenario_contenu+="+ \"  ); \" +\n";
              CUP$parser$result = new java_cup.runtime.Symbol(16/*MESSAGE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$7 ::= 
            {
              Object RESULT = null;

      if(cond)
      {   
       scenario_contenu+=" \" for(CAppareil appareil2 : this.l_appareils)  \" + \n   " +
       "  \" if (appareil2.getNomAppareil().equals(\\\""+iterateur+"\\\")) \" + \n     " ; 
      scenario_contenu+= " \" if (appareil2.etatAppareil.equals(TypeEtatAppareil."+T.toUpperCase()+")) \" + \n ";
   
      
       cond=false;
       iterateur=null;
      } 
        
        scenario_contenu+=" \" System.out.println( \" ";
        
              CUP$parser$result = new java_cup.runtime.Symbol(39/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // S ::= SINON NT$6 INST FSI POINTV 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  scenario_contenu+= " \" } \" + \n" ; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$6 ::= 
            {
              Object RESULT = null;
 
       scenario_contenu+=" \"  else { \" +";
      
              CUP$parser$result = new java_cup.runtime.Symbol(38/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // S ::= FSI POINTV 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND ::= PG IDF POINT OPERATION_ET DEGAL IDF POINT OPERATION_ET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*COND*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND ::= PG IDF POINT OPERATION_ET DEGAL ETAT PD 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 T=s;
 iterateur=k;      


              CUP$parser$result = new java_cup.runtime.Symbol(20/*COND*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDITION ::= SI COND ALORS NT$5 INST S 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*CONDITION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$5 ::= 
            {
              Object RESULT = null;

 cond=true;
 

              CUP$parser$result = new java_cup.runtime.Symbol(37/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP4 ::= error 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*OP4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP4 ::= IDF 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=k; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*OP4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOUCLE ::= POURTOUT OP4 DPOINT IDF NT$4 FAIRE INST FAIT POINTV 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*BOUCLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

      if(Scenarios.get(k)!=null || App_simple.get(k)!=null || App_struct.get(k)!=null)
     {
       boucle_impossible(k);
       inst_impossible=true;

     }  
      
      
      
       iterateur=it;  
       boucle=true;  

        
              CUP$parser$result = new java_cup.runtime.Symbol(36/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BOUCLE ::= POURTOUT OP4 DPOINT AUTRE_VIDE NT$3 FAIRE INST FAIT POINTV 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*BOUCLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$3 ::= 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        if(Scenarios.get(k)!=null || App_simple.get(k)!=null || App_struct.get(k)!=null)
     {
       boucle_impossible(k);
       inst_impossible=true;
  
     }  
       
       
         other=true;
         boucle=true;
         
              CUP$parser$result = new java_cup.runtime.Symbol(35/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOUCLE ::= POURTOUT OP4 DPOINT TYPEA NT$2 FAIRE INST FAIT POINTV 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*BOUCLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$2 ::= 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
     if(Scenarios.get(k)!=null || App_simple.get(k)!=null || App_struct.get(k)!=null)
     {
       boucle_impossible(k);
       inst_impossible=true;
     }   
   boucle=true;
   T=t;
  
  
              CUP$parser$result = new java_cup.runtime.Symbol(34/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIMPLE ::= error POINT OPERATION POINTV 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*SIMPLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIMPLE ::= IDF POINT OPERATION POINTV 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    if(!boucle && !cond)
   {scenario_contenu+=  "\"for(CAppareil appareil : this.l_appareils)   \"  \n + " +
       "    \" if (appareil.getNomAppareil().equals(\\\""+k+"\\\")) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n";
   }
   else
   {
   if(!cond)
     { 
              
         if(!inst_impossible)
      {
        
         if(iterateur!=null)
         {
         scenario_contenu+=" \" for(CEnsAppareil ensAppareil : this.l_ensembles)  \" + \n " +
        "  \" if (ensAppareil.nomEnsAppareil.equals(\\\""+iterateur+"\\\"))   \" + \n ";
        scenario_contenu+=" \" for(CAppareil appareil : ensAppareil.l_appareils) \"   +  \n" ;
        scenario_contenu+= " \" appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+"); \" + \n";

         }
         else
       {
        scenario_contenu+=" \" for(CAppareil appareil : this.l_appareils) \"     \n +" ; 
        if(other)
       { if(autre!=null)
        scenario_contenu+= " \" if (appareil.typeAppareil.equals(TypeAppareil.AUTRE_APPAREIL_"+T+")) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n " ;
         else
        scenario_contenu+= " \" if (appareil.estAutreAppareil) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n " ;
 
 
       }
        else
         scenario_contenu+= " \" if (appareil.typeAppareil.equals(TypeAppareil."+T+")) appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  \" +\n " ;

       }         
       
       boucle=false;
       iterateur=null;
       other=false;
       autre=null;
     }
     else{ System.out.println("**** "+T+inst_impossible);scenario_contenu=scenario_contenu;inst_impossible=false;}
     }
     else
    {
       
       scenario_contenu+=" \" for(CAppareil appareil : this.l_appareils)  \" + \n   " +
       "  \" if (appareil.getNomAppareil().equals(\\\""+iterateur+"\\\")) \" + \n     " ; 
      scenario_contenu+= " \" if (appareil.etatAppareil.equals(TypeEtatAppareil."+T.toUpperCase()+")) \" + \n ";
     
       if(!k.equals(iterateur))
      {
     scenario_contenu+=" \" { for(CAppareil appareil2 : this.l_appareils)  \" + \n " +
       " \"  if (appareil2.getNomAppareil().equals(\\\""+k+"\\\")) \" +  \n    " ;
     scenario_contenu+= " \" appareil2.appliquer(TypeActionAppareil."+o.toUpperCase()+");  " ;  
      }
      else
       scenario_contenu+= " \" appareil.appliquer(TypeActionAppareil."+o.toUpperCase()+");  " ;
      
       scenario_contenu+= !k.equals(iterateur)? " } \" + \n"  : "\" \n +";
       cond=false;
       iterateur=null;
    }   

   }  

  


              CUP$parser$result = new java_cup.runtime.Symbol(13/*SIMPLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= executer_scenario IDF POINTV 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
     List<String> keyIndex = new ArrayList<String>(Scenarios.keySet());
     scenario_contenu+=" \n  \" this.execScenarioNum("+keyIndex.indexOf(k)+"); \" + \n";
     
     
              CUP$parser$result = new java_cup.runtime.Symbol(22/*OP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= SIMPLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= MESSAGE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= CONDITION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= BOUCLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= OP INST 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*INST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= OP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*INST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SCENARIOS ::= Scenario OP4 CD INST ScenarioF OP4 CD 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
    

    if(k!=null && k1!=null) // pas d'erreur lors de la déclaration du scénario
    {
      if(Scenarios.get(k)==null && App_simple.get(k)==null && App_struct.get(k)==null && k1.equals(k))
      {
         if(!scenario_contenu.isEmpty())
         {int index=scenario_contenu.lastIndexOf("+");
         scenario_contenu=scenario_contenu.substring(0,index)+scenario_contenu.substring(index+1);
         }
         scenario_contenu="String "+k+"_contenu ="+scenario_contenu+";\n"; 
         Scenarios.put(k,scenario_contenu);
         scenario_contenu="";
         
      } 
      else 
       { 
         
    if(!k.equals(k1))
        {
        scenario_fermé(k,k1);
         scenario_contenu="";
        }
        else
        {
         scenario_existant(k);
         scenario_contenu="";
        }
       }  
    } 
   else {scenario_contenu="";}    
    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*SCENARIOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SCENARIOS ::= Scenario OP4 CD INST ScenarioF OP4 CD NT$1 SCENARIOS 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*SCENARIOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
  


    if(k!=null && k1!=null) // pas d'erreur lors de la déclaration du scénario
    {
      if(Scenarios.get(k)==null && App_simple.get(k)==null && App_struct.get(k)==null && k1.equals(k))
      {
         if(!scenario_contenu.isEmpty())
         {int index=scenario_contenu.lastIndexOf("+");
         scenario_contenu=scenario_contenu.substring(0,index)+scenario_contenu.substring(index+1);
         }
         scenario_contenu="String "+k+"_contenu ="+scenario_contenu+";\n"; 
         Scenarios.put(k,scenario_contenu);
         scenario_contenu="";
         
      } 
      else 
       { 
        if(!k.equals(k1))
        {
        scenario_fermé(k,k1);
         scenario_contenu="";
        }
        else
        {
         scenario_existant(k);
         scenario_contenu="";
        }
       }  
    } 
    else
    {
      scenario_contenu="";
    }   
    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ZONE_SCENARII ::= Dec_Sce SCENARIOS Dec_SceF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*ZONE_SCENARII*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IDFSSS ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*IDFSSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IDFSSS ::= IDF 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		if(typei==0 || typei==1 || typei==2 ){
             if(Inter_simple.get(k) == null && App_simple.get(k)==null)
               {Inter_simple.put(k,new Entree(typei));}
	     else
               {identInst_existant(k);} 
             }
              CUP$parser$result = new java_cup.runtime.Symbol(27/*IDFSSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IDFSSS ::= IDF OP5 IDFSSS 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(typei==0 || typei==1 || typei==2 ){
             if(Inter_simple.get(k) == null && App_simple.get(k)==null)
               {Inter_simple.put(k,new Entree(typei));}
	     else
               {identInst_existant(k);} 
             }
              CUP$parser$result = new java_cup.runtime.Symbol(27/*IDFSSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPEI ::= TELECOMMANDE 
            {
              String RESULT = null;
		 typei=2; RESULT="TELECOMMANDE";
              CUP$parser$result = new java_cup.runtime.Symbol(31/*TYPEI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPEI ::= MOBILE 
            {
              String RESULT = null;
		 typei=1; RESULT="MOBILE";
              CUP$parser$result = new java_cup.runtime.Symbol(31/*TYPEI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPEI ::= INTERRUPTEUR 
            {
              String RESULT = null;
		 typei=0; RESULT="INTERRUPTEUR";
              CUP$parser$result = new java_cup.runtime.Symbol(31/*TYPEI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INTERFACES ::= TYPEI IDFSSS POINT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*INTERFACES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INTERFACES ::= TYPEI IDFSSS POINT INTERFACES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*INTERFACES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ZONE_INTERFACES ::= Dec_Int INTERFACES Dec_IntF ZONE_SCENARII 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ZONE_INTERFACES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ZONE_INTERFACES ::= Dec_Int INTERFACES Dec_IntF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ZONE_INTERFACES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ZONE_COMMUNE ::= ZONE_SCENARII 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ZONE_COMMUNE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ZONE_COMMUNE ::= ZONE_INTERFACES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ZONE_COMMUNE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDFSS ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*IDFSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDFSS ::= error OP5 IDFSS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*IDFSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDFSS ::= IDF 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v.add(k); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*IDFSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDFSS ::= IDF OP5 IDFSS 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 v.add(k);
       
       
              CUP$parser$result = new java_cup.runtime.Symbol(26/*IDFSS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT ::= definir IDF EGAL AG IDFSS AD POINT 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
   App_struct.put(k,v);
   v=new Vector<String>();
 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*STRUCT*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPEA ::= AUTRE_VIDE PG AUTRE PD 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 type=5; if(s.equals("cafetiere")) 
        
        { RESULT="CAFE";autre="CAFE";} else {
            RESULT="HIFI";
            autre="HIFI";}
           other=true;  
              CUP$parser$result = new java_cup.runtime.Symbol(30/*TYPEA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPEA ::= ALARME 
            {
              String RESULT = null;
		 type=4; RESULT="ALARME";
              CUP$parser$result = new java_cup.runtime.Symbol(30/*TYPEA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPEA ::= ECLAIRAGE 
            {
              String RESULT = null;
		 type=3; RESULT="ECLAIRAGE";
              CUP$parser$result = new java_cup.runtime.Symbol(30/*TYPEA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPEA ::= FENETRE 
            {
              String RESULT = null;
		 type=2; RESULT="FENETRE"; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*TYPEA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPEA ::= CHAUFFAGE 
            {
              String RESULT = null;
		 type=1; RESULT="CHAUFFAGE";
              CUP$parser$result = new java_cup.runtime.Symbol(30/*TYPEA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPEA ::= VOLET 
            {
              String RESULT = null;
		 type=0; RESULT="VOLET"; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*TYPEA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OP5 ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OP5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OP5 ::= V 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OP5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDFS ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*IDFS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDFS ::= error OP5 IDFS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*IDFS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDFS ::= IDF 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		    if(type!=5) { if(App_simple.get(k)==null) App_simple.put(k,new Entree(type)); 
       else
       {
           identifiant_existant(k);
       }
       }
        else {if(App_simple.get(k)==null) { App_simple.put(k,new Entree(type,null,autre)); autre=null; other=false;
        }
        else
        {
        identifiant_existant(k);

        }
        }
        

              CUP$parser$result = new java_cup.runtime.Symbol(6/*IDFS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDFS ::= IDF NT$0 OP5 IDFS 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*IDFS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
    if(type!=5) {if(App_simple.get(k)==null) App_simple.put(k,new Entree(type)); 
       else {
          identifiant_existant(k);
       }
        }
             else {if(App_simple.get(k)==null) App_simple.put(k,new Entree(type,null,autre)); 
             else
             {
                  identifiant_existant(k);

             }
             
             }    
          

              CUP$parser$result = new java_cup.runtime.Symbol(32/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // APPAREILS ::= STRUCT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*APPAREILS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // APPAREILS ::= STRUCT APPAREILS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*APPAREILS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // APPAREILS ::= TYPEA IDFS POINT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*APPAREILS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // APPAREILS ::= TYPEA IDFS POINT APPAREILS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*APPAREILS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ZONE_APPAREILS ::= Dec_App APPAREILS Dec_AppF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ZONE_APPAREILS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= DEBUT EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // DEBUT ::= ProgD ZONE_APPAREILS ZONE_COMMUNE ZONE_COMMANDE ProgDF 
            {
              Object RESULT = null;
		
 System.out.println("FINPROG "+parser.pline()+","+parser.pcolumn()); 
  String str="public class CMaisonUser extends CMaison { public CMaisonUser() { \n super();\n";
  for(Entry <String,Entree>  entry: App_simple.entrySet())
   {
       
       switch (entry.getValue().getType())
       {
       case 0:
       str+=" CVoletFenetre "+entry.getKey()+" = new CVoletFenetre (\""+entry.getKey()+"\", TypeAppareil.VOLET);\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 1:
       str+=" CChauffage "+entry.getKey()+" = new CChauffage(\""+entry.getKey()+"\", TypeAppareil.CHAUFFAGE);\n";   
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 2:
       str+=" CVoletFenetre "+entry.getKey()+" = new CVoletFenetre (\""+entry.getKey()+"\", TypeAppareil.FENETRE); \n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 3:
       str+=" CEclairage "+entry.getKey()+" = new CEclairage (\""+entry.getKey()+"\", TypeAppareil.ECLAIRAGE);\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 4:
       str+=" CAlarme "+entry.getKey()+" = new CAlarme (\""+entry.getKey()+"\", TypeAppareil.ALARME);\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       case 5:
       str+=" CAutreAppareil "+entry.getKey()+" = new CAutreAppareil (\""+entry.getKey()+"\", TypeAppareil.AUTRE_APPAREIL_"+entry.getValue().getAutre()+");\n"; 
       str+=" ma_liste_appareils.add("+entry.getKey()+");\n";
       break;
       }

    }
   


   
   for(Entry <String,Vector<String> >  entry: App_struct.entrySet())
   {
        
         str+=" CEnsAppareil "+entry.getKey()+" = new CEnsAppareil(\""+entry.getKey()+"\");\n";
       for(String string : entry.getValue())
       {
        str+=entry.getKey()+".addAppareil("+string+");\n";
          
       }

   str+="ma_liste_ens_appareils.add("+entry.getKey()+"); \n"; 

   }

     
     for(Entry <String,Entree>  entry: Inter_simple.entrySet())
   {
       
       switch (entry.getValue().getType())
       {
       case 0:
       str+=" CInterface "+entry.getKey()+" = new CInterface (\""+entry.getKey()+"\", TypeInterface.INTERRUPTEUR);\n"; 
       str+=" ma_liste_interfaces.add("+entry.getKey()+");\n";
       break;
       case 1:
       str+=" CInterface "+entry.getKey()+" = new CInterface (\""+entry.getKey()+"\", TypeInterface.MOBILE);\n";   
       str+=" ma_liste_interfaces.add("+entry.getKey()+");\n";
       break;
       case 2:
       str+=" CInterface "+entry.getKey()+" = new CInterface (\""+entry.getKey()+"\", TypeInterface.TELECOMMANDE); \n"; 
       str+=" ma_liste_interfaces.add("+entry.getKey()+");\n";
       break;
      
       }

    }
 
       String treated="";
      for(Entry <String,String >  entry: Scenarios.entrySet())
    {
             str+=entry.getValue().replace("*","+");
             str+= "CScenario "+entry.getKey()+" = new CScenario(\""+entry.getKey()+"\","+entry.getKey()+"_contenu ); \n "+
                " ma_liste_scenarios.add("+entry.getKey()+");  \n";
             str+="\n\n\n";
    }


   for(Entry <String,Vector<String> >  entry: commande_struct.entrySet())
   {
        

       for(String string : entry.getValue())
       {
        str+=entry.getKey()+".addScenarioAssocie("+string+");\n";
          
       }



   }



 for(Entry <String,Vector<String> >  entry: Date_struct.entrySet())
   {
        

      

       str+=" CProgrammation p"+i+" = new CProgrammation(\""+entry.getKey()+"\");\n";
 for(String string : entry.getValue())
       {
       str+=" CDate p"+i+"d"+k+"= new CDate "+string+";\n";
       str+=" p"+i+".addDate(p"+i+"d"+k+");\n";
       k++;
       }
       str+=" ma_liste_programmations.add(p"+i+");\n\n"; 
       k=1;
       i++;


   }


 str+="  monHabitat = new HabitatSpecific(ma_liste_appareils,ma_liste_ens_appareils, ma_liste_scenarios,ma_liste_interfaces, ma_liste_programmations);\n}\n}";
             generate_code(str,"CMaisonUser.java");  

    int i=0;
    str="import java.util.ArrayList;\n public class HabitatSpecific extends Habitat {\n public HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog)\n { super(lapp,lens,lscen,lint,lprog); }\n public void execScenarioNum(int num) \n{ System.out.println( \"Execution du scenario \"+this.l_scenarios.get(num).getNomScenario()+\"... \");";
    str+=" \n \n switch(num) {\n";
    for(Entry<String,String> entry:Scenarios.entrySet()){
    str+="\n case "+i+":\n";
    i++;
    
    treated=entry.getValue().replace("+","");
    treated=treated.replaceAll("(\")","");
    treated=treated.replace("\\","\"");
    Pattern p=Pattern.compile("System.out.println\\((\\s)+(.+)\\)");
    Matcher matcher=p.matcher(treated);
    
    while(matcher.find()){
     String temp=matcher.group(2);
     treated=treated.replace(temp,"\""+temp+"\"");
    }
    treated=treated.replace("estAutreAppareil","estTypeAutreAppareil()");
    treated=treated.replace("CAppareil appareil : ensAppareil.l_appareils)","CAppareil appareil : ensAppareil.lAppareils)");
    String tab[]=treated.split("=");
    for(int z=1;z <tab.length;z++)
      str+=tab[z];
    str+="\n break ;\n";

    }
    str+="\n default:  \n } } } \n" ;

generate_code(str,"HabitatSpecific.java"); 

 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*DEBUT*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

